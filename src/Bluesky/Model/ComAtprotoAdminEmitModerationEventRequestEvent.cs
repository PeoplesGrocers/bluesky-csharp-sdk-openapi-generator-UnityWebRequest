/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Bluesky.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Bluesky.Model
{
    /// <summary>
    /// ComAtprotoAdminEmitModerationEventRequestEvent
    /// </summary>
    [JsonConverter(typeof(ComAtprotoAdminEmitModerationEventRequestEventJsonConverter))]
    [DataContract(Name = "com_atproto_admin_emitModerationEvent_request_event")]
    public partial class ComAtprotoAdminEmitModerationEventRequestEvent : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventTakedown" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventTakedown.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventTakedown actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventAcknowledge" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventAcknowledge.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventAcknowledge actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventEscalate" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventEscalate.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventEscalate actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventComment" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventComment.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventComment actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventLabel" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventLabel.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventLabel actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventReport" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventReport.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventReport actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventMute" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventMute.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventMute actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventReverseTakedown" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventReverseTakedown.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventReverseTakedown actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventUnmute" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventUnmute.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventUnmute actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventEmail" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventEmail.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventEmail actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminEmitModerationEventRequestEvent" /> class
        /// with the <see cref="ComAtprotoAdminDefsModEventTag" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ComAtprotoAdminDefsModEventTag.</param>
        public ComAtprotoAdminEmitModerationEventRequestEvent(ComAtprotoAdminDefsModEventTag actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ComAtprotoAdminDefsModEventAcknowledge))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventComment))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventEmail))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventEscalate))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventLabel))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventMute))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventReport))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventReverseTakedown))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventTag))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventTakedown))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ComAtprotoAdminDefsModEventUnmute))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ComAtprotoAdminDefsModEventAcknowledge, ComAtprotoAdminDefsModEventComment, ComAtprotoAdminDefsModEventEmail, ComAtprotoAdminDefsModEventEscalate, ComAtprotoAdminDefsModEventLabel, ComAtprotoAdminDefsModEventMute, ComAtprotoAdminDefsModEventReport, ComAtprotoAdminDefsModEventReverseTakedown, ComAtprotoAdminDefsModEventTag, ComAtprotoAdminDefsModEventTakedown, ComAtprotoAdminDefsModEventUnmute");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventTakedown`. If the actual instance is not `ComAtprotoAdminDefsModEventTakedown`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventTakedown</returns>
        public ComAtprotoAdminDefsModEventTakedown GetComAtprotoAdminDefsModEventTakedown()
        {
            return (ComAtprotoAdminDefsModEventTakedown)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventAcknowledge`. If the actual instance is not `ComAtprotoAdminDefsModEventAcknowledge`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventAcknowledge</returns>
        public ComAtprotoAdminDefsModEventAcknowledge GetComAtprotoAdminDefsModEventAcknowledge()
        {
            return (ComAtprotoAdminDefsModEventAcknowledge)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventEscalate`. If the actual instance is not `ComAtprotoAdminDefsModEventEscalate`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventEscalate</returns>
        public ComAtprotoAdminDefsModEventEscalate GetComAtprotoAdminDefsModEventEscalate()
        {
            return (ComAtprotoAdminDefsModEventEscalate)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventComment`. If the actual instance is not `ComAtprotoAdminDefsModEventComment`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventComment</returns>
        public ComAtprotoAdminDefsModEventComment GetComAtprotoAdminDefsModEventComment()
        {
            return (ComAtprotoAdminDefsModEventComment)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventLabel`. If the actual instance is not `ComAtprotoAdminDefsModEventLabel`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventLabel</returns>
        public ComAtprotoAdminDefsModEventLabel GetComAtprotoAdminDefsModEventLabel()
        {
            return (ComAtprotoAdminDefsModEventLabel)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventReport`. If the actual instance is not `ComAtprotoAdminDefsModEventReport`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventReport</returns>
        public ComAtprotoAdminDefsModEventReport GetComAtprotoAdminDefsModEventReport()
        {
            return (ComAtprotoAdminDefsModEventReport)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventMute`. If the actual instance is not `ComAtprotoAdminDefsModEventMute`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventMute</returns>
        public ComAtprotoAdminDefsModEventMute GetComAtprotoAdminDefsModEventMute()
        {
            return (ComAtprotoAdminDefsModEventMute)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventReverseTakedown`. If the actual instance is not `ComAtprotoAdminDefsModEventReverseTakedown`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventReverseTakedown</returns>
        public ComAtprotoAdminDefsModEventReverseTakedown GetComAtprotoAdminDefsModEventReverseTakedown()
        {
            return (ComAtprotoAdminDefsModEventReverseTakedown)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventUnmute`. If the actual instance is not `ComAtprotoAdminDefsModEventUnmute`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventUnmute</returns>
        public ComAtprotoAdminDefsModEventUnmute GetComAtprotoAdminDefsModEventUnmute()
        {
            return (ComAtprotoAdminDefsModEventUnmute)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventEmail`. If the actual instance is not `ComAtprotoAdminDefsModEventEmail`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventEmail</returns>
        public ComAtprotoAdminDefsModEventEmail GetComAtprotoAdminDefsModEventEmail()
        {
            return (ComAtprotoAdminDefsModEventEmail)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ComAtprotoAdminDefsModEventTag`. If the actual instance is not `ComAtprotoAdminDefsModEventTag`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ComAtprotoAdminDefsModEventTag</returns>
        public ComAtprotoAdminDefsModEventTag GetComAtprotoAdminDefsModEventTag()
        {
            return (ComAtprotoAdminDefsModEventTag)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAtprotoAdminEmitModerationEventRequestEvent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ComAtprotoAdminEmitModerationEventRequestEvent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ComAtprotoAdminEmitModerationEventRequestEvent</returns>
        public static ComAtprotoAdminEmitModerationEventRequestEvent FromJson(string jsonString)
        {
            ComAtprotoAdminEmitModerationEventRequestEvent newComAtprotoAdminEmitModerationEventRequestEvent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newComAtprotoAdminEmitModerationEventRequestEvent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventAcknowledge).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventAcknowledge>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventAcknowledge>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventAcknowledge");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventAcknowledge: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventComment).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventComment>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventComment>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventComment");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventComment: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventEmail).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventEmail>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventEmail>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventEmail");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventEmail: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventEscalate).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventEscalate>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventEscalate>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventEscalate");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventEscalate: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventLabel).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventLabel>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventLabel>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventLabel");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventLabel: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventMute).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventMute>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventMute>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventMute");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventMute: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventReport).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventReport>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventReport>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventReport");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventReport: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventReverseTakedown).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventReverseTakedown>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventReverseTakedown>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventReverseTakedown");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventReverseTakedown: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventTag).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventTag>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventTag>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventTag");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventTag: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventTakedown).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventTakedown>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventTakedown>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventTakedown");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventTakedown: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ComAtprotoAdminDefsModEventUnmute).GetProperty("AdditionalProperties") == null)
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventUnmute>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.SerializerSettings));
                }
                else
                {
                    newComAtprotoAdminEmitModerationEventRequestEvent = new ComAtprotoAdminEmitModerationEventRequestEvent(JsonConvert.DeserializeObject<ComAtprotoAdminDefsModEventUnmute>(jsonString, ComAtprotoAdminEmitModerationEventRequestEvent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ComAtprotoAdminDefsModEventUnmute");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ComAtprotoAdminDefsModEventUnmute: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newComAtprotoAdminEmitModerationEventRequestEvent;
        }

    }

    /// <summary>
    /// Custom JSON converter for ComAtprotoAdminEmitModerationEventRequestEvent
    /// </summary>
    public class ComAtprotoAdminEmitModerationEventRequestEventJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ComAtprotoAdminEmitModerationEventRequestEvent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ComAtprotoAdminEmitModerationEventRequestEvent.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
