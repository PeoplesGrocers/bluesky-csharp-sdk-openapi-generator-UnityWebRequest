/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Bluesky.Client.OpenAPIDateConverter;

namespace Bluesky.Model
{
    /// <summary>
    /// Metadata tag on an atproto resource (eg, repo or record).
    /// </summary>
    [DataContract(Name = "com.atproto.label.defs.label")]
    public partial class ComAtprotoLabelDefsLabel
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoLabelDefsLabel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoLabelDefsLabel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoLabelDefsLabel" /> class.
        /// </summary>
        /// <param name="src">DID of the actor who created this label. (required).</param>
        /// <param name="uri">AT URI of the record, repository (account), or other resource that this label applies to. (required).</param>
        /// <param name="cid">Optionally, CID specifying the specific version of &#39;uri&#39; resource this label applies to..</param>
        /// <param name="val">The short string name of the value or type of this label. (required).</param>
        /// <param name="neg">If true, this is a negation label, overwriting a previous label..</param>
        /// <param name="cts">Timestamp when this label was created. (required).</param>
        public ComAtprotoLabelDefsLabel(string src = default(string), string uri = default(string), string cid = default(string), string val = default(string), bool neg = default(bool), DateTime cts = default(DateTime))
        {
            // to ensure "src" is required (not null)
            if (src == null)
            {
                throw new ArgumentNullException("src is a required property for ComAtprotoLabelDefsLabel and cannot be null");
            }
            this.Src = src;
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for ComAtprotoLabelDefsLabel and cannot be null");
            }
            this.Uri = uri;
            // to ensure "val" is required (not null)
            if (val == null)
            {
                throw new ArgumentNullException("val is a required property for ComAtprotoLabelDefsLabel and cannot be null");
            }
            this.Val = val;
            this.Cts = cts;
            this.Cid = cid;
            this.Neg = neg;
        }

        /// <summary>
        /// DID of the actor who created this label.
        /// </summary>
        /// <value>DID of the actor who created this label.</value>
        [DataMember(Name = "src", IsRequired = true, EmitDefaultValue = true)]
        public string Src { get; set; }

        /// <summary>
        /// AT URI of the record, repository (account), or other resource that this label applies to.
        /// </summary>
        /// <value>AT URI of the record, repository (account), or other resource that this label applies to.</value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Optionally, CID specifying the specific version of &#39;uri&#39; resource this label applies to.
        /// </summary>
        /// <value>Optionally, CID specifying the specific version of &#39;uri&#39; resource this label applies to.</value>
        [DataMember(Name = "cid", EmitDefaultValue = false)]
        public string Cid { get; set; }

        /// <summary>
        /// The short string name of the value or type of this label.
        /// </summary>
        /// <value>The short string name of the value or type of this label.</value>
        [DataMember(Name = "val", IsRequired = true, EmitDefaultValue = true)]
        public string Val { get; set; }

        /// <summary>
        /// If true, this is a negation label, overwriting a previous label.
        /// </summary>
        /// <value>If true, this is a negation label, overwriting a previous label.</value>
        [DataMember(Name = "neg", EmitDefaultValue = true)]
        public bool Neg { get; set; }

        /// <summary>
        /// Timestamp when this label was created.
        /// </summary>
        /// <value>Timestamp when this label was created.</value>
        [DataMember(Name = "cts", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Cts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoLabelDefsLabel {\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Val: ").Append(Val).Append("\n");
            sb.Append("  Neg: ").Append(Neg).Append("\n");
            sb.Append("  Cts: ").Append(Cts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
