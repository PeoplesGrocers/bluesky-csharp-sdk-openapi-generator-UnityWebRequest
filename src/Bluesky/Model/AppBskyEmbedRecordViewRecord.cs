/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Bluesky.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Bluesky.Model
{
    /// <summary>
    /// AppBskyEmbedRecordViewRecord
    /// </summary>
    [JsonConverter(typeof(AppBskyEmbedRecordViewRecordJsonConverter))]
    [DataContract(Name = "app_bsky_embed_record_view_record")]
    public partial class AppBskyEmbedRecordViewRecord : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// with the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppBskyEmbedRecordViewRecord.</param>
        public AppBskyEmbedRecordViewRecord(AppBskyEmbedRecordViewRecord actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// with the <see cref="AppBskyEmbedRecordViewNotFound" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppBskyEmbedRecordViewNotFound.</param>
        public AppBskyEmbedRecordViewRecord(AppBskyEmbedRecordViewNotFound actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// with the <see cref="AppBskyEmbedRecordViewBlocked" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppBskyEmbedRecordViewBlocked.</param>
        public AppBskyEmbedRecordViewRecord(AppBskyEmbedRecordViewBlocked actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// with the <see cref="AppBskyFeedDefsGeneratorView" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppBskyFeedDefsGeneratorView.</param>
        public AppBskyEmbedRecordViewRecord(AppBskyFeedDefsGeneratorView actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyEmbedRecordViewRecord" /> class
        /// with the <see cref="AppBskyGraphDefsListView" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppBskyGraphDefsListView.</param>
        public AppBskyEmbedRecordViewRecord(AppBskyGraphDefsListView actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AppBskyEmbedRecordViewBlocked))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppBskyEmbedRecordViewNotFound))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppBskyEmbedRecordViewRecord))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppBskyFeedDefsGeneratorView))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppBskyGraphDefsListView))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AppBskyEmbedRecordViewBlocked, AppBskyEmbedRecordViewNotFound, AppBskyEmbedRecordViewRecord, AppBskyFeedDefsGeneratorView, AppBskyGraphDefsListView");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AppBskyEmbedRecordViewRecord`. If the actual instance is not `AppBskyEmbedRecordViewRecord`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppBskyEmbedRecordViewRecord</returns>
        public AppBskyEmbedRecordViewRecord GetAppBskyEmbedRecordViewRecord()
        {
            return (AppBskyEmbedRecordViewRecord)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppBskyEmbedRecordViewNotFound`. If the actual instance is not `AppBskyEmbedRecordViewNotFound`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppBskyEmbedRecordViewNotFound</returns>
        public AppBskyEmbedRecordViewNotFound GetAppBskyEmbedRecordViewNotFound()
        {
            return (AppBskyEmbedRecordViewNotFound)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppBskyEmbedRecordViewBlocked`. If the actual instance is not `AppBskyEmbedRecordViewBlocked`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppBskyEmbedRecordViewBlocked</returns>
        public AppBskyEmbedRecordViewBlocked GetAppBskyEmbedRecordViewBlocked()
        {
            return (AppBskyEmbedRecordViewBlocked)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppBskyFeedDefsGeneratorView`. If the actual instance is not `AppBskyFeedDefsGeneratorView`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppBskyFeedDefsGeneratorView</returns>
        public AppBskyFeedDefsGeneratorView GetAppBskyFeedDefsGeneratorView()
        {
            return (AppBskyFeedDefsGeneratorView)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppBskyGraphDefsListView`. If the actual instance is not `AppBskyGraphDefsListView`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppBskyGraphDefsListView</returns>
        public AppBskyGraphDefsListView GetAppBskyGraphDefsListView()
        {
            return (AppBskyGraphDefsListView)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppBskyEmbedRecordViewRecord {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AppBskyEmbedRecordViewRecord.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AppBskyEmbedRecordViewRecord
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AppBskyEmbedRecordViewRecord</returns>
        public static AppBskyEmbedRecordViewRecord FromJson(string jsonString)
        {
            AppBskyEmbedRecordViewRecord newAppBskyEmbedRecordViewRecord = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAppBskyEmbedRecordViewRecord;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppBskyEmbedRecordViewBlocked).GetProperty("AdditionalProperties") == null)
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewBlocked>(jsonString, AppBskyEmbedRecordViewRecord.SerializerSettings));
                }
                else
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewBlocked>(jsonString, AppBskyEmbedRecordViewRecord.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppBskyEmbedRecordViewBlocked");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppBskyEmbedRecordViewBlocked: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppBskyEmbedRecordViewNotFound).GetProperty("AdditionalProperties") == null)
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewNotFound>(jsonString, AppBskyEmbedRecordViewRecord.SerializerSettings));
                }
                else
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewNotFound>(jsonString, AppBskyEmbedRecordViewRecord.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppBskyEmbedRecordViewNotFound");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppBskyEmbedRecordViewNotFound: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppBskyEmbedRecordViewRecord).GetProperty("AdditionalProperties") == null)
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewRecord>(jsonString, AppBskyEmbedRecordViewRecord.SerializerSettings));
                }
                else
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyEmbedRecordViewRecord>(jsonString, AppBskyEmbedRecordViewRecord.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppBskyEmbedRecordViewRecord");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppBskyEmbedRecordViewRecord: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppBskyFeedDefsGeneratorView).GetProperty("AdditionalProperties") == null)
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyFeedDefsGeneratorView>(jsonString, AppBskyEmbedRecordViewRecord.SerializerSettings));
                }
                else
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyFeedDefsGeneratorView>(jsonString, AppBskyEmbedRecordViewRecord.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppBskyFeedDefsGeneratorView");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppBskyFeedDefsGeneratorView: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppBskyGraphDefsListView).GetProperty("AdditionalProperties") == null)
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyGraphDefsListView>(jsonString, AppBskyEmbedRecordViewRecord.SerializerSettings));
                }
                else
                {
                    newAppBskyEmbedRecordViewRecord = new AppBskyEmbedRecordViewRecord(JsonConvert.DeserializeObject<AppBskyGraphDefsListView>(jsonString, AppBskyEmbedRecordViewRecord.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppBskyGraphDefsListView");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppBskyGraphDefsListView: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newAppBskyEmbedRecordViewRecord;
        }

    }

    /// <summary>
    /// Custom JSON converter for AppBskyEmbedRecordViewRecord
    /// </summary>
    public class AppBskyEmbedRecordViewRecordJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AppBskyEmbedRecordViewRecord).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return AppBskyEmbedRecordViewRecord.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
