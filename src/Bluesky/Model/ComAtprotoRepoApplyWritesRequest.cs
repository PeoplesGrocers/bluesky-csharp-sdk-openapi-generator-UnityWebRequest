/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Bluesky.Client.OpenAPIDateConverter;

namespace Bluesky.Model
{
    /// <summary>
    /// ComAtprotoRepoApplyWritesRequest
    /// </summary>
    [DataContract(Name = "com_atproto_repo_applyWrites_request")]
    public partial class ComAtprotoRepoApplyWritesRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApplyWritesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComAtprotoRepoApplyWritesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoRepoApplyWritesRequest" /> class.
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account). (required).</param>
        /// <param name="validate">Can be set to &#39;false&#39; to skip Lexicon schema validation of record data, for all operations. (default to true).</param>
        /// <param name="writes">writes (required).</param>
        /// <param name="swapCommit">If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations..</param>
        public ComAtprotoRepoApplyWritesRequest(string repo = default(string), bool validate = true, List<ComAtprotoRepoApplyWritesRequestWritesInner> writes = default(List<ComAtprotoRepoApplyWritesRequestWritesInner>), string swapCommit = default(string))
        {
            // to ensure "repo" is required (not null)
            if (repo == null)
            {
                throw new ArgumentNullException("repo is a required property for ComAtprotoRepoApplyWritesRequest and cannot be null");
            }
            this.Repo = repo;
            // to ensure "writes" is required (not null)
            if (writes == null)
            {
                throw new ArgumentNullException("writes is a required property for ComAtprotoRepoApplyWritesRequest and cannot be null");
            }
            this.Writes = writes;
            this.Validate = validate;
            this.SwapCommit = swapCommit;
        }

        /// <summary>
        /// The handle or DID of the repo (aka, current account).
        /// </summary>
        /// <value>The handle or DID of the repo (aka, current account).</value>
        [DataMember(Name = "repo", IsRequired = true, EmitDefaultValue = true)]
        public string Repo { get; set; }

        /// <summary>
        /// Can be set to &#39;false&#39; to skip Lexicon schema validation of record data, for all operations.
        /// </summary>
        /// <value>Can be set to &#39;false&#39; to skip Lexicon schema validation of record data, for all operations.</value>
        [DataMember(Name = "validate", EmitDefaultValue = true)]
        public bool Validate { get; set; }

        /// <summary>
        /// Gets or Sets Writes
        /// </summary>
        [DataMember(Name = "writes", IsRequired = true, EmitDefaultValue = true)]
        public List<ComAtprotoRepoApplyWritesRequestWritesInner> Writes { get; set; }

        /// <summary>
        /// If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.
        /// </summary>
        /// <value>If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.</value>
        [DataMember(Name = "swapCommit", EmitDefaultValue = false)]
        public string SwapCommit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComAtprotoRepoApplyWritesRequest {\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  Validate: ").Append(Validate).Append("\n");
            sb.Append("  Writes: ").Append(Writes).Append("\n");
            sb.Append("  SwapCommit: ").Append(SwapCommit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
