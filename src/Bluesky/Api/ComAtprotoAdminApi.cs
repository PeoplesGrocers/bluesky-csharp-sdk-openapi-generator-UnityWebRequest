/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bluesky.Client;
using Bluesky.Model;

namespace Bluesky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to create a new, re-usable communication (email for now) template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <returns>ComAtprotoAdminDefsCommunicationTemplateView</returns>
        ComAtprotoAdminDefsCommunicationTemplateView ComAtprotoAdminCreateCommunicationTemplate(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to create a new, re-usable communication (email for now) template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminCreateCommunicationTemplateWithHttpInfo(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminDeleteAccount(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDeleteAccountWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a communication template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminDeleteCommunicationTemplate(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a communication template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfo(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminDisableAccountInvites(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDisableAccountInvitesWithHttpInfo(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminDisableInviteCodes(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminDisableInviteCodesWithHttpInfo(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <returns>ComAtprotoAdminDefsModEventView</returns>
        ComAtprotoAdminDefsModEventView ComAtprotoAdminEmitModerationEvent(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsModEventView</returns>
        ApiResponse<ComAtprotoAdminDefsModEventView> ComAtprotoAdminEmitModerationEventWithHttpInfo(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminEnableAccountInvites(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminEnableAccountInvitesWithHttpInfo(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ComAtprotoAdminDefsAccountView</returns>
        ComAtprotoAdminDefsAccountView ComAtprotoAdminGetAccountInfo(string did);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsAccountView</returns>
        ApiResponse<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoWithHttpInfo(string did);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminGetInviteCodes200Response</returns>
        ComAtprotoAdminGetInviteCodes200Response ComAtprotoAdminGetInviteCodes(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetInviteCodes200Response</returns>
        ApiResponse<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesWithHttpInfo(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ComAtprotoAdminDefsModEventViewDetail</returns>
        ComAtprotoAdminDefsModEventViewDetail ComAtprotoAdminGetModerationEvent(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsModEventViewDetail</returns>
        ApiResponse<ComAtprotoAdminDefsModEventViewDetail> ComAtprotoAdminGetModerationEventWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <returns>ComAtprotoAdminDefsRecordViewDetail</returns>
        ComAtprotoAdminDefsRecordViewDetail ComAtprotoAdminGetRecord(string uri, string? cid = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsRecordViewDetail</returns>
        ApiResponse<ComAtprotoAdminDefsRecordViewDetail> ComAtprotoAdminGetRecordWithHttpInfo(string uri, string? cid = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ComAtprotoAdminDefsRepoViewDetail</returns>
        ComAtprotoAdminDefsRepoViewDetail ComAtprotoAdminGetRepo(string did);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsRepoViewDetail</returns>
        ApiResponse<ComAtprotoAdminDefsRepoViewDetail> ComAtprotoAdminGetRepoWithHttpInfo(string did);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminGetSubjectStatus(string? did = default(string?), string? uri = default(string?), string? blob = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusWithHttpInfo(string? did = default(string?), string? uri = default(string?), string? blob = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of all communication templates.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoAdminListCommunicationTemplates200Response</returns>
        ComAtprotoAdminListCommunicationTemplates200Response ComAtprotoAdminListCommunicationTemplates();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of all communication templates.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoAdminListCommunicationTemplates200Response</returns>
        ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response> ComAtprotoAdminListCommunicationTemplatesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminQueryModerationEvents200Response</returns>
        ComAtprotoAdminQueryModerationEvents200Response ComAtprotoAdminQueryModerationEvents(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminQueryModerationEvents200Response</returns>
        ApiResponse<ComAtprotoAdminQueryModerationEvents200Response> ComAtprotoAdminQueryModerationEventsWithHttpInfo(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminQueryModerationStatuses200Response</returns>
        ComAtprotoAdminQueryModerationStatuses200Response ComAtprotoAdminQueryModerationStatuses(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminQueryModerationStatuses200Response</returns>
        ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response> ComAtprotoAdminQueryModerationStatusesWithHttpInfo(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminSearchRepos200Response</returns>
        ComAtprotoAdminSearchRepos200Response ComAtprotoAdminSearchRepos(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminSearchRepos200Response</returns>
        ApiResponse<ComAtprotoAdminSearchRepos200Response> ComAtprotoAdminSearchReposWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <returns>ComAtprotoAdminSendEmail200Response</returns>
        ComAtprotoAdminSendEmail200Response ComAtprotoAdminSendEmail(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminSendEmail200Response</returns>
        ApiResponse<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailWithHttpInfo(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountEmail(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountEmailWithHttpInfo(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountHandle(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountHandleWithHttpInfo(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <returns></returns>
        void ComAtprotoAdminUpdateAccountPassword(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <returns>ComAtprotoAdminDefsCommunicationTemplateView</returns>
        ComAtprotoAdminDefsCommunicationTemplateView ComAtprotoAdminUpdateCommunicationTemplate(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfo(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminUpdateSubjectStatus(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to create a new, re-usable communication (email for now) template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminCreateCommunicationTemplateAsync(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to create a new, re-usable communication (email for now) template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsCommunicationTemplateView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView>> ComAtprotoAdminCreateCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDeleteAccountAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDeleteAccountWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a communication template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDeleteCommunicationTemplateAsync(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a communication template.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDisableAccountInvitesAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminDisableInviteCodesAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Disable some set of codes and/or all codes associated with a set of users.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsModEventView</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsModEventView> ComAtprotoAdminEmitModerationEventAsync(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Take a moderation action on an actor.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsModEventView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsModEventView>> ComAtprotoAdminEmitModerationEventWithHttpInfoAsync(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminEnableAccountInvitesAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Re-enable an account&#39;s ability to receive invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsAccountView</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about an account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsAccountView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsAccountView>> ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetInviteCodes200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an admin view of invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetInviteCodes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetInviteCodes200Response>> ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsModEventViewDetail</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsModEventViewDetail> ComAtprotoAdminGetModerationEventAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a moderation event.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsModEventViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsModEventViewDetail>> ComAtprotoAdminGetModerationEventWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsRecordViewDetail</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsRecordViewDetail> ComAtprotoAdminGetRecordAsync(string uri, string? cid = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a record.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsRecordViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsRecordViewDetail>> ComAtprotoAdminGetRecordWithHttpInfoAsync(string uri, string? cid = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsRepoViewDetail</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsRepoViewDetail> ComAtprotoAdminGetRepoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get details about a repository.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsRepoViewDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsRepoViewDetail>> ComAtprotoAdminGetRepoWithHttpInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of all communication templates.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminListCommunicationTemplates200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminListCommunicationTemplates200Response> ComAtprotoAdminListCommunicationTemplatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of all communication templates.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminListCommunicationTemplates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response>> ComAtprotoAdminListCommunicationTemplatesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminQueryModerationEvents200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminQueryModerationEvents200Response> ComAtprotoAdminQueryModerationEventsAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List moderation events related to a subject.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminQueryModerationEvents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminQueryModerationEvents200Response>> ComAtprotoAdminQueryModerationEventsWithHttpInfoAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminQueryModerationStatuses200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminQueryModerationStatuses200Response> ComAtprotoAdminQueryModerationStatusesAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// View moderation statuses of subjects (record or repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminQueryModerationStatuses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response>> ComAtprotoAdminQueryModerationStatusesWithHttpInfoAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSearchRepos200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminSearchRepos200Response> ComAtprotoAdminSearchReposAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find repositories based on a search term.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSearchRepos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminSearchRepos200Response>> ComAtprotoAdminSearchReposWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSendEmail200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send email to a user&#39;s account email address.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSendEmail200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminSendEmail200Response>> ComAtprotoAdminSendEmailWithHttpInfoAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountEmailAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountHandleAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an account&#39;s handle.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountPasswordAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the password for a user account as an administrator.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminUpdateCommunicationTemplateAsync(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsCommunicationTemplateView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView>> ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the service-specific admin status of a subject (account, record, or blob).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoAdminApi : IComAtprotoAdminApiSync, IComAtprotoAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoAdminApi : IDisposable, IComAtprotoAdminApi
    {
        private Bluesky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoAdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ComAtprotoAdminApi(string basePath)
        {
            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                new Bluesky.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ComAtprotoAdminApi(Bluesky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoAdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ComAtprotoAdminApi(Bluesky.Client.ISynchronousClient client, Bluesky.Client.IAsynchronousClient asyncClient, Bluesky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Bluesky.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bluesky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bluesky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bluesky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bluesky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Administrative action to create a new, re-usable communication (email for now) template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <returns>ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public ComAtprotoAdminDefsCommunicationTemplateView ComAtprotoAdminCreateCommunicationTemplate(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = ComAtprotoAdminCreateCommunicationTemplateWithHttpInfo(comAtprotoAdminCreateCommunicationTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Administrative action to create a new, re-usable communication (email for now) template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminCreateCommunicationTemplateWithHttpInfo(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest)
        {
            // verify the required parameter 'comAtprotoAdminCreateCommunicationTemplateRequest' is set
            if (comAtprotoAdminCreateCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminCreateCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminCreateCommunicationTemplate");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminCreateCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminDefsCommunicationTemplateView>("/com.atproto.admin.createCommunicationTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminCreateCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to create a new, re-usable communication (email for now) template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminCreateCommunicationTemplateAsync(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminCreateCommunicationTemplateWithHttpInfoAsync(comAtprotoAdminCreateCommunicationTemplateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Administrative action to create a new, re-usable communication (email for now) template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminCreateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsCommunicationTemplateView)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView>> ComAtprotoAdminCreateCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminCreateCommunicationTemplateRequest comAtprotoAdminCreateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminCreateCommunicationTemplateRequest' is set
            if (comAtprotoAdminCreateCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminCreateCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminCreateCommunicationTemplate");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminCreateCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoAdminDefsCommunicationTemplateView>("/com.atproto.admin.createCommunicationTemplate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminCreateCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminDeleteAccount(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest)
        {
            ComAtprotoAdminDeleteAccountWithHttpInfo(comAtprotoAdminDeleteAccountRequest);
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminDeleteAccountWithHttpInfo(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest)
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteAccount");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.deleteAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDeleteAccountAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminDeleteAccountWithHttpInfoAsync(comAtprotoAdminDeleteAccountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Delete a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminDeleteAccountWithHttpInfoAsync(ComAtprotoAdminDeleteAccountRequest comAtprotoAdminDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDeleteAccountRequest' is set
            if (comAtprotoAdminDeleteAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteAccountRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteAccount");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDeleteAccountRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.deleteAccount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a communication template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminDeleteCommunicationTemplate(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest)
        {
            ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfo(comAtprotoAdminDeleteCommunicationTemplateRequest);
        }

        /// <summary>
        ///  Delete a communication template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfo(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest)
        {
            // verify the required parameter 'comAtprotoAdminDeleteCommunicationTemplateRequest' is set
            if (comAtprotoAdminDeleteCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteCommunicationTemplate");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDeleteCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.deleteCommunicationTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a communication template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDeleteCommunicationTemplateAsync(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfoAsync(comAtprotoAdminDeleteCommunicationTemplateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Delete a communication template.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDeleteCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminDeleteCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminDeleteCommunicationTemplateRequest comAtprotoAdminDeleteCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDeleteCommunicationTemplateRequest' is set
            if (comAtprotoAdminDeleteCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDeleteCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDeleteCommunicationTemplate");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDeleteCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.deleteCommunicationTemplate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDeleteCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminDisableAccountInvites(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest)
        {
            ComAtprotoAdminDisableAccountInvitesWithHttpInfo(comAtprotoAdminDisableAccountInvitesRequest);
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminDisableAccountInvitesWithHttpInfo(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest)
        {
            // verify the required parameter 'comAtprotoAdminDisableAccountInvitesRequest' is set
            if (comAtprotoAdminDisableAccountInvitesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableAccountInvites");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDisableAccountInvitesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.disableAccountInvites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableAccountInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDisableAccountInvitesAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(comAtprotoAdminDisableAccountInvitesRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Disable an account from receiving new invite codes, but does not invalidate existing codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminDisableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminDisableAccountInvitesRequest comAtprotoAdminDisableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDisableAccountInvitesRequest' is set
            if (comAtprotoAdminDisableAccountInvitesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableAccountInvites");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDisableAccountInvitesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.disableAccountInvites", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableAccountInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminDisableInviteCodes(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest)
        {
            ComAtprotoAdminDisableInviteCodesWithHttpInfo(comAtprotoAdminDisableInviteCodesRequest);
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminDisableInviteCodesWithHttpInfo(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest)
        {
            // verify the required parameter 'comAtprotoAdminDisableInviteCodesRequest' is set
            if (comAtprotoAdminDisableInviteCodesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableInviteCodesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableInviteCodes");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDisableInviteCodesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.disableInviteCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminDisableInviteCodesAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(comAtprotoAdminDisableInviteCodesRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Disable some set of codes and/or all codes associated with a set of users.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminDisableInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminDisableInviteCodesWithHttpInfoAsync(ComAtprotoAdminDisableInviteCodesRequest comAtprotoAdminDisableInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminDisableInviteCodesRequest' is set
            if (comAtprotoAdminDisableInviteCodesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminDisableInviteCodesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminDisableInviteCodes");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminDisableInviteCodesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.disableInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminDisableInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <returns>ComAtprotoAdminDefsModEventView</returns>
        public ComAtprotoAdminDefsModEventView ComAtprotoAdminEmitModerationEvent(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventView> localVarResponse = ComAtprotoAdminEmitModerationEventWithHttpInfo(comAtprotoAdminEmitModerationEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsModEventView</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventView> ComAtprotoAdminEmitModerationEventWithHttpInfo(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest)
        {
            // verify the required parameter 'comAtprotoAdminEmitModerationEventRequest' is set
            if (comAtprotoAdminEmitModerationEventRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEmitModerationEventRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEmitModerationEvent");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminEmitModerationEventRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminDefsModEventView>("/com.atproto.admin.emitModerationEvent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEmitModerationEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsModEventView</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsModEventView> ComAtprotoAdminEmitModerationEventAsync(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminEmitModerationEventWithHttpInfoAsync(comAtprotoAdminEmitModerationEventRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventView> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventView> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Take a moderation action on an actor.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEmitModerationEventRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsModEventView)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventView>> ComAtprotoAdminEmitModerationEventWithHttpInfoAsync(ComAtprotoAdminEmitModerationEventRequest comAtprotoAdminEmitModerationEventRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminEmitModerationEventRequest' is set
            if (comAtprotoAdminEmitModerationEventRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEmitModerationEventRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEmitModerationEvent");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminEmitModerationEventRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoAdminDefsModEventView>("/com.atproto.admin.emitModerationEvent", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEmitModerationEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminEnableAccountInvites(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest)
        {
            ComAtprotoAdminEnableAccountInvitesWithHttpInfo(comAtprotoAdminEnableAccountInvitesRequest);
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminEnableAccountInvitesWithHttpInfo(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest)
        {
            // verify the required parameter 'comAtprotoAdminEnableAccountInvitesRequest' is set
            if (comAtprotoAdminEnableAccountInvitesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEnableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEnableAccountInvites");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminEnableAccountInvitesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.enableAccountInvites", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEnableAccountInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminEnableAccountInvitesAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(comAtprotoAdminEnableAccountInvitesRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Re-enable an account&#39;s ability to receive invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminEnableAccountInvitesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminEnableAccountInvitesWithHttpInfoAsync(ComAtprotoAdminEnableAccountInvitesRequest comAtprotoAdminEnableAccountInvitesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminEnableAccountInvitesRequest' is set
            if (comAtprotoAdminEnableAccountInvitesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminEnableAccountInvitesRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminEnableAccountInvites");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminEnableAccountInvitesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.enableAccountInvites", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminEnableAccountInvites", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ComAtprotoAdminDefsAccountView</returns>
        public ComAtprotoAdminDefsAccountView ComAtprotoAdminGetAccountInfo(string did)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> localVarResponse = ComAtprotoAdminGetAccountInfoWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsAccountView</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoWithHttpInfo(string did)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfo");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDefsAccountView>("/com.atproto.admin.getAccountInfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsAccountView</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsAccountView> ComAtprotoAdminGetAccountInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(did, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsAccountView> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about an account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsAccountView)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsAccountView>> ComAtprotoAdminGetAccountInfoWithHttpInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetAccountInfo");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminDefsAccountView>("/com.atproto.admin.getAccountInfo", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetAccountInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminGetInviteCodes200Response</returns>
        public ComAtprotoAdminGetInviteCodes200Response ComAtprotoAdminGetInviteCodes(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> localVarResponse = ComAtprotoAdminGetInviteCodesWithHttpInfo(sort, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetInviteCodes200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesWithHttpInfo(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminGetInviteCodes200Response>("/com.atproto.admin.getInviteCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetInviteCodes200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetInviteCodes200Response> ComAtprotoAdminGetInviteCodesAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(sort, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an admin view of invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort"> (optional, default to recent)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetInviteCodes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminGetInviteCodes200Response>> ComAtprotoAdminGetInviteCodesWithHttpInfoAsync(string? sort = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminGetInviteCodes200Response>("/com.atproto.admin.getInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ComAtprotoAdminDefsModEventViewDetail</returns>
        public ComAtprotoAdminDefsModEventViewDetail ComAtprotoAdminGetModerationEvent(int id)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventViewDetail> localVarResponse = ComAtprotoAdminGetModerationEventWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsModEventViewDetail</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventViewDetail> ComAtprotoAdminGetModerationEventWithHttpInfo(int id)
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDefsModEventViewDetail>("/com.atproto.admin.getModerationEvent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetModerationEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsModEventViewDetail</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsModEventViewDetail> ComAtprotoAdminGetModerationEventAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetModerationEventWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventViewDetail> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventViewDetail> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a moderation event.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsModEventViewDetail)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsModEventViewDetail>> ComAtprotoAdminGetModerationEventWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminDefsModEventViewDetail>("/com.atproto.admin.getModerationEvent", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetModerationEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <returns>ComAtprotoAdminDefsRecordViewDetail</returns>
        public ComAtprotoAdminDefsRecordViewDetail ComAtprotoAdminGetRecord(string uri, string? cid = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRecordViewDetail> localVarResponse = ComAtprotoAdminGetRecordWithHttpInfo(uri, cid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsRecordViewDetail</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRecordViewDetail> ComAtprotoAdminGetRecordWithHttpInfo(string uri, string? cid = default(string?))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling ComAtprotoAdminApi->ComAtprotoAdminGetRecord");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDefsRecordViewDetail>("/com.atproto.admin.getRecord", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsRecordViewDetail</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsRecordViewDetail> ComAtprotoAdminGetRecordAsync(string uri, string? cid = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetRecordWithHttpInfoAsync(uri, cid, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRecordViewDetail> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRecordViewDetail> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a record.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri"></param>
        /// <param name="cid"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsRecordViewDetail)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRecordViewDetail>> ComAtprotoAdminGetRecordWithHttpInfoAsync(string uri, string? cid = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling ComAtprotoAdminApi->ComAtprotoAdminGetRecord");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminDefsRecordViewDetail>("/com.atproto.admin.getRecord", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ComAtprotoAdminDefsRepoViewDetail</returns>
        public ComAtprotoAdminDefsRepoViewDetail ComAtprotoAdminGetRepo(string did)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRepoViewDetail> localVarResponse = ComAtprotoAdminGetRepoWithHttpInfo(did);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsRepoViewDetail</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRepoViewDetail> ComAtprotoAdminGetRepoWithHttpInfo(string did)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetRepo");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminDefsRepoViewDetail>("/com.atproto.admin.getRepo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetRepo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsRepoViewDetail</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsRepoViewDetail> ComAtprotoAdminGetRepoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetRepoWithHttpInfoAsync(did, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRepoViewDetail> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRepoViewDetail> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get details about a repository.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsRepoViewDetail)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsRepoViewDetail>> ComAtprotoAdminGetRepoWithHttpInfoAsync(string did, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'did' when calling ComAtprotoAdminApi->ComAtprotoAdminGetRepo");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminDefsRepoViewDetail>("/com.atproto.admin.getRepo", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetRepo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        public ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminGetSubjectStatus(string? did = default(string?), string? uri = default(string?), string? blob = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = ComAtprotoAdminGetSubjectStatusWithHttpInfo(did, uri, blob);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusWithHttpInfo(string? did = default(string?), string? uri = default(string?), string? blob = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (did != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            }
            if (uri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            }
            if (blob != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "blob", blob));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.getSubjectStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetSubjectStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminGetSubjectStatusAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(did, uri, blob, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did"> (optional)</param>
        /// <param name="uri"> (optional)</param>
        /// <param name="blob"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminGetSubjectStatusWithHttpInfoAsync(string? did = default(string?), string? uri = default(string?), string? blob = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (did != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "did", did));
            }
            if (uri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            }
            if (blob != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "blob", blob));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.getSubjectStatus", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminGetSubjectStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of all communication templates.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoAdminListCommunicationTemplates200Response</returns>
        public ComAtprotoAdminListCommunicationTemplates200Response ComAtprotoAdminListCommunicationTemplates()
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response> localVarResponse = ComAtprotoAdminListCommunicationTemplatesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of all communication templates.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoAdminListCommunicationTemplates200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response> ComAtprotoAdminListCommunicationTemplatesWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminListCommunicationTemplates200Response>("/com.atproto.admin.listCommunicationTemplates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminListCommunicationTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of all communication templates.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminListCommunicationTemplates200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminListCommunicationTemplates200Response> ComAtprotoAdminListCommunicationTemplatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminListCommunicationTemplatesWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of all communication templates.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminListCommunicationTemplates200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminListCommunicationTemplates200Response>> ComAtprotoAdminListCommunicationTemplatesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminListCommunicationTemplates200Response>("/com.atproto.admin.listCommunicationTemplates", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminListCommunicationTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminQueryModerationEvents200Response</returns>
        public ComAtprotoAdminQueryModerationEvents200Response ComAtprotoAdminQueryModerationEvents(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationEvents200Response> localVarResponse = ComAtprotoAdminQueryModerationEventsWithHttpInfo(types, createdBy, sortDirection, createdAfter, createdBefore, subject, includeAllUserRecords, limit, hasComment, comment, addedLabels, removedLabels, addedTags, removedTags, reportTypes, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminQueryModerationEvents200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationEvents200Response> ComAtprotoAdminQueryModerationEventsWithHttpInfo(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdBy", createdBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (includeAllUserRecords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeAllUserRecords", includeAllUserRecords));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (hasComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "hasComment", hasComment));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (addedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "addedLabels", addedLabels));
            }
            if (removedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "removedLabels", removedLabels));
            }
            if (addedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "addedTags", addedTags));
            }
            if (removedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "removedTags", removedTags));
            }
            if (reportTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "reportTypes", reportTypes));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminQueryModerationEvents200Response>("/com.atproto.admin.queryModerationEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminQueryModerationEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminQueryModerationEvents200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminQueryModerationEvents200Response> ComAtprotoAdminQueryModerationEventsAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminQueryModerationEventsWithHttpInfoAsync(types, createdBy, sortDirection, createdAfter, createdBefore, subject, includeAllUserRecords, limit, hasComment, comment, addedLabels, removedLabels, addedTags, removedTags, reportTypes, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationEvents200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationEvents200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List moderation events related to a subject.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The types of events (fully qualified string in the format of com.atproto.admin#modEvent&lt;name&gt;) to filter by. If not specified, all events are returned. (optional)</param>
        /// <param name="createdBy"> (optional)</param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp. (optional, default to &quot;desc&quot;)</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp (optional)</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) owned by the did are returned (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="hasComment">If true, only events with comments are returned (optional)</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned (optional)</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned (optional)</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned (optional)</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned (optional)</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned (optional)</param>
        /// <param name="reportTypes"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminQueryModerationEvents200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationEvents200Response>> ComAtprotoAdminQueryModerationEventsWithHttpInfoAsync(List<string>? types = default(List<string>?), string? createdBy = default(string?), string? sortDirection = default(string?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string? subject = default(string?), bool? includeAllUserRecords = default(bool?), int? limit = default(int?), bool? hasComment = default(bool?), string? comment = default(string?), List<string>? addedLabels = default(List<string>?), List<string>? removedLabels = default(List<string>?), List<string>? addedTags = default(List<string>?), List<string>? removedTags = default(List<string>?), List<string>? reportTypes = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (types != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "types", types));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdBy", createdBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (includeAllUserRecords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeAllUserRecords", includeAllUserRecords));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (hasComment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "hasComment", hasComment));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (addedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "addedLabels", addedLabels));
            }
            if (removedLabels != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "removedLabels", removedLabels));
            }
            if (addedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "addedTags", addedTags));
            }
            if (removedTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "removedTags", removedTags));
            }
            if (reportTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "reportTypes", reportTypes));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminQueryModerationEvents200Response>("/com.atproto.admin.queryModerationEvents", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminQueryModerationEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminQueryModerationStatuses200Response</returns>
        public ComAtprotoAdminQueryModerationStatuses200Response ComAtprotoAdminQueryModerationStatuses(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response> localVarResponse = ComAtprotoAdminQueryModerationStatusesWithHttpInfo(subject, comment, reportedAfter, reportedBefore, reviewedAfter, reviewedBefore, includeMuted, reviewState, ignoreSubjects, lastReviewedBy, sortField, sortDirection, takendown, appealed, limit, tags, excludeTags, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminQueryModerationStatuses200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response> ComAtprotoAdminQueryModerationStatusesWithHttpInfo(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (reportedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reportedAfter", reportedAfter));
            }
            if (reportedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reportedBefore", reportedBefore));
            }
            if (reviewedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewedAfter", reviewedAfter));
            }
            if (reviewedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewedBefore", reviewedBefore));
            }
            if (includeMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeMuted", includeMuted));
            }
            if (reviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewState", reviewState));
            }
            if (ignoreSubjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "ignoreSubjects", ignoreSubjects));
            }
            if (lastReviewedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "lastReviewedBy", lastReviewedBy));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (takendown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "takendown", takendown));
            }
            if (appealed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "appealed", appealed));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "excludeTags", excludeTags));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminQueryModerationStatuses200Response>("/com.atproto.admin.queryModerationStatuses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminQueryModerationStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminQueryModerationStatuses200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminQueryModerationStatuses200Response> ComAtprotoAdminQueryModerationStatusesAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminQueryModerationStatusesWithHttpInfoAsync(subject, comment, reportedAfter, reportedBefore, reviewedAfter, reviewedBefore, includeMuted, reviewState, ignoreSubjects, lastReviewedBy, sortField, sortDirection, takendown, appealed, limit, tags, excludeTags, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"> (optional)</param>
        /// <param name="comment">Search subjects by keyword from comments (optional)</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp (optional)</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp (optional)</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp (optional)</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp (optional)</param>
        /// <param name="includeMuted">By default, we don&#39;t include muted subjects in the results. Set this to true to include them. (optional)</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state (optional)</param>
        /// <param name="ignoreSubjects"> (optional)</param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator (optional)</param>
        /// <param name="sortField"> (optional, default to &quot;lastReportedAt&quot;)</param>
        /// <param name="sortDirection"> (optional, default to &quot;desc&quot;)</param>
        /// <param name="takendown">Get subjects that were taken down (optional)</param>
        /// <param name="appealed">Get subjects in unresolved appealed status (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="excludeTags"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminQueryModerationStatuses200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminQueryModerationStatuses200Response>> ComAtprotoAdminQueryModerationStatusesWithHttpInfoAsync(string? subject = default(string?), string? comment = default(string?), DateTime? reportedAfter = default(DateTime?), DateTime? reportedBefore = default(DateTime?), DateTime? reviewedAfter = default(DateTime?), DateTime? reviewedBefore = default(DateTime?), bool? includeMuted = default(bool?), string? reviewState = default(string?), List<string>? ignoreSubjects = default(List<string>?), string? lastReviewedBy = default(string?), string? sortField = default(string?), string? sortDirection = default(string?), bool? takendown = default(bool?), bool? appealed = default(bool?), int? limit = default(int?), List<string>? tags = default(List<string>?), List<string>? excludeTags = default(List<string>?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (reportedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reportedAfter", reportedAfter));
            }
            if (reportedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reportedBefore", reportedBefore));
            }
            if (reviewedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewedAfter", reviewedAfter));
            }
            if (reviewedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewedBefore", reviewedBefore));
            }
            if (includeMuted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeMuted", includeMuted));
            }
            if (reviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "reviewState", reviewState));
            }
            if (ignoreSubjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "ignoreSubjects", ignoreSubjects));
            }
            if (lastReviewedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "lastReviewedBy", lastReviewedBy));
            }
            if (sortField != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortField", sortField));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (takendown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "takendown", takendown));
            }
            if (appealed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "appealed", appealed));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "excludeTags", excludeTags));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminQueryModerationStatuses200Response>("/com.atproto.admin.queryModerationStatuses", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminQueryModerationStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ComAtprotoAdminSearchRepos200Response</returns>
        public ComAtprotoAdminSearchRepos200Response ComAtprotoAdminSearchRepos(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminSearchRepos200Response> localVarResponse = ComAtprotoAdminSearchReposWithHttpInfo(q, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of ComAtprotoAdminSearchRepos200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminSearchRepos200Response> ComAtprotoAdminSearchReposWithHttpInfo(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoAdminSearchRepos200Response>("/com.atproto.admin.searchRepos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSearchRepos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSearchRepos200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminSearchRepos200Response> ComAtprotoAdminSearchReposAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminSearchReposWithHttpInfoAsync(q, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminSearchRepos200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminSearchRepos200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find repositories based on a search term.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSearchRepos200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminSearchRepos200Response>> ComAtprotoAdminSearchReposWithHttpInfoAsync(string? q = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoAdminSearchRepos200Response>("/com.atproto.admin.searchRepos", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSearchRepos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <returns>ComAtprotoAdminSendEmail200Response</returns>
        public ComAtprotoAdminSendEmail200Response ComAtprotoAdminSendEmail(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> localVarResponse = ComAtprotoAdminSendEmailWithHttpInfo(comAtprotoAdminSendEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminSendEmail200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailWithHttpInfo(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest)
        {
            // verify the required parameter 'comAtprotoAdminSendEmailRequest' is set
            if (comAtprotoAdminSendEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminSendEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminSendEmail");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminSendEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminSendEmail200Response>("/com.atproto.admin.sendEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSendEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminSendEmail200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminSendEmail200Response> ComAtprotoAdminSendEmailAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminSendEmailWithHttpInfoAsync(comAtprotoAdminSendEmailRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send email to a user&#39;s account email address.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminSendEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminSendEmail200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminSendEmail200Response>> ComAtprotoAdminSendEmailWithHttpInfoAsync(ComAtprotoAdminSendEmailRequest comAtprotoAdminSendEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminSendEmailRequest' is set
            if (comAtprotoAdminSendEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminSendEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminSendEmail");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminSendEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoAdminSendEmail200Response>("/com.atproto.admin.sendEmail", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminSendEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountEmail(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest)
        {
            ComAtprotoAdminUpdateAccountEmailWithHttpInfo(comAtprotoAdminUpdateAccountEmailRequest);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountEmailWithHttpInfo(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountEmailRequest' is set
            if (comAtprotoAdminUpdateAccountEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountEmail");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountEmailAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(comAtprotoAdminUpdateAccountEmailRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountEmailWithHttpInfoAsync(ComAtprotoAdminUpdateAccountEmailRequest comAtprotoAdminUpdateAccountEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountEmailRequest' is set
            if (comAtprotoAdminUpdateAccountEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountEmailRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountEmail");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountEmail", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountHandle(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest)
        {
            ComAtprotoAdminUpdateAccountHandleWithHttpInfo(comAtprotoAdminUpdateAccountHandleRequest);
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountHandleWithHttpInfo(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountHandleRequest' is set
            if (comAtprotoAdminUpdateAccountHandleRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountHandleRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountHandle");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountHandleRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountHandle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountHandle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountHandleAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(comAtprotoAdminUpdateAccountHandleRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Administrative action to update an account&#39;s handle.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountHandleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountHandleWithHttpInfoAsync(ComAtprotoAdminUpdateAccountHandleRequest comAtprotoAdminUpdateAccountHandleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountHandleRequest' is set
            if (comAtprotoAdminUpdateAccountHandleRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountHandleRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountHandle");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountHandleRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountHandle", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountHandle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <returns></returns>
        public void ComAtprotoAdminUpdateAccountPassword(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest)
        {
            ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(comAtprotoAdminUpdateAccountPasswordRequest);
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoAdminUpdateAccountPasswordWithHttpInfo(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest)
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' is set
            if (comAtprotoAdminUpdateAccountPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountPassword");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountPasswordRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.admin.updateAccountPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoAdminUpdateAccountPasswordAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(comAtprotoAdminUpdateAccountPasswordRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Update the password for a user account as an administrator.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateAccountPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoAdminUpdateAccountPasswordWithHttpInfoAsync(ComAtprotoAdminUpdateAccountPasswordRequest comAtprotoAdminUpdateAccountPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' is set
            if (comAtprotoAdminUpdateAccountPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateAccountPasswordRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateAccountPassword");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateAccountPasswordRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.admin.updateAccountPassword", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateAccountPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <returns>ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public ComAtprotoAdminDefsCommunicationTemplateView ComAtprotoAdminUpdateCommunicationTemplate(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfo(comAtprotoAdminUpdateCommunicationTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <returns>ApiResponse of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfo(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest)
        {
            // verify the required parameter 'comAtprotoAdminUpdateCommunicationTemplateRequest' is set
            if (comAtprotoAdminUpdateCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateCommunicationTemplate");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminDefsCommunicationTemplateView>("/com.atproto.admin.updateCommunicationTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminDefsCommunicationTemplateView</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminDefsCommunicationTemplateView> ComAtprotoAdminUpdateCommunicationTemplateAsync(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfoAsync(comAtprotoAdminUpdateCommunicationTemplateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminUpdateCommunicationTemplateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminDefsCommunicationTemplateView)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminDefsCommunicationTemplateView>> ComAtprotoAdminUpdateCommunicationTemplateWithHttpInfoAsync(ComAtprotoAdminUpdateCommunicationTemplateRequest comAtprotoAdminUpdateCommunicationTemplateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminUpdateCommunicationTemplateRequest' is set
            if (comAtprotoAdminUpdateCommunicationTemplateRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminUpdateCommunicationTemplateRequest' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateCommunicationTemplate");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminUpdateCommunicationTemplateRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoAdminDefsCommunicationTemplateView>("/com.atproto.admin.updateCommunicationTemplate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateCommunicationTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <returns>ComAtprotoAdminGetSubjectStatus200Response</returns>
        public ComAtprotoAdminGetSubjectStatus200Response ComAtprotoAdminUpdateSubjectStatus(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response)
        {
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(comAtprotoAdminGetSubjectStatus200Response);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <returns>ApiResponse of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusWithHttpInfo(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response)
        {
            // verify the required parameter 'comAtprotoAdminGetSubjectStatus200Response' is set
            if (comAtprotoAdminGetSubjectStatus200Response == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminGetSubjectStatus200Response' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateSubjectStatus");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminGetSubjectStatus200Response;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.updateSubjectStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateSubjectStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoAdminGetSubjectStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoAdminGetSubjectStatus200Response> ComAtprotoAdminUpdateSubjectStatusAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(comAtprotoAdminGetSubjectStatus200Response, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the service-specific admin status of a subject (account, record, or blob).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoAdminGetSubjectStatus200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoAdminGetSubjectStatus200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoAdminGetSubjectStatus200Response>> ComAtprotoAdminUpdateSubjectStatusWithHttpInfoAsync(ComAtprotoAdminGetSubjectStatus200Response comAtprotoAdminGetSubjectStatus200Response, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoAdminGetSubjectStatus200Response' is set
            if (comAtprotoAdminGetSubjectStatus200Response == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoAdminGetSubjectStatus200Response' when calling ComAtprotoAdminApi->ComAtprotoAdminUpdateSubjectStatus");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoAdminGetSubjectStatus200Response;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoAdminGetSubjectStatus200Response>("/com.atproto.admin.updateSubjectStatus", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoAdminUpdateSubjectStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
