/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bluesky.Client;
using Bluesky.Model;

namespace Bluesky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>AppBskyNotificationGetUnreadCount200Response</returns>
        AppBskyNotificationGetUnreadCount200Response AppBskyNotificationGetUnreadCount(DateTime? seenAt = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>ApiResponse of AppBskyNotificationGetUnreadCount200Response</returns>
        ApiResponse<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountWithHttpInfo(DateTime? seenAt = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>AppBskyNotificationListNotifications200Response</returns>
        AppBskyNotificationListNotifications200Response AppBskyNotificationListNotifications(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>ApiResponse of AppBskyNotificationListNotifications200Response</returns>
        ApiResponse<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <returns></returns>
        void AppBskyNotificationRegisterPush(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyNotificationRegisterPushWithHttpInfo(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <returns></returns>
        void AppBskyNotificationUpdateSeen(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBskyNotificationUpdateSeenWithHttpInfo(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationGetUnreadCount200Response</returns>
        System.Threading.Tasks.Task<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountAsync(DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Count the number of unread notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationGetUnreadCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyNotificationGetUnreadCount200Response>> AppBskyNotificationGetUnreadCountWithHttpInfoAsync(DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationListNotifications200Response</returns>
        System.Threading.Tasks.Task<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsAsync(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerate notifications for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationListNotifications200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyNotificationListNotifications200Response>> AppBskyNotificationListNotificationsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyNotificationRegisterPushAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyNotificationRegisterPushWithHttpInfoAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBskyNotificationUpdateSeenAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Notify server that the requesting account has seen notifications. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBskyNotificationUpdateSeenWithHttpInfoAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyNotificationApi : IAppBskyNotificationApiSync, IAppBskyNotificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBskyNotificationApi : IDisposable, IAppBskyNotificationApi
    {
        private Bluesky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppBskyNotificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppBskyNotificationApi(string basePath)
        {
            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                new Bluesky.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppBskyNotificationApi(Bluesky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyNotificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppBskyNotificationApi(Bluesky.Client.ISynchronousClient client, Bluesky.Client.IAsynchronousClient asyncClient, Bluesky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Bluesky.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bluesky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bluesky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bluesky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bluesky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>AppBskyNotificationGetUnreadCount200Response</returns>
        public AppBskyNotificationGetUnreadCount200Response AppBskyNotificationGetUnreadCount(DateTime? seenAt = default(DateTime?))
        {
            Bluesky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> localVarResponse = AppBskyNotificationGetUnreadCountWithHttpInfo(seenAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>ApiResponse of AppBskyNotificationGetUnreadCount200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountWithHttpInfo(DateTime? seenAt = default(DateTime?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyNotificationGetUnreadCount200Response>("/app.bsky.notification.getUnreadCount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationGetUnreadCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationGetUnreadCount200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyNotificationGetUnreadCount200Response> AppBskyNotificationGetUnreadCountAsync(DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyNotificationGetUnreadCountWithHttpInfoAsync(seenAt, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Count the number of unread notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationGetUnreadCount200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyNotificationGetUnreadCount200Response>> AppBskyNotificationGetUnreadCountWithHttpInfoAsync(DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyNotificationGetUnreadCount200Response>("/app.bsky.notification.getUnreadCount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationGetUnreadCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>AppBskyNotificationListNotifications200Response</returns>
        public AppBskyNotificationListNotifications200Response AppBskyNotificationListNotifications(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?))
        {
            Bluesky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> localVarResponse = AppBskyNotificationListNotificationsWithHttpInfo(limit, cursor, seenAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <returns>ApiResponse of AppBskyNotificationListNotifications200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyNotificationListNotifications200Response>("/app.bsky.notification.listNotifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationListNotifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyNotificationListNotifications200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyNotificationListNotifications200Response> AppBskyNotificationListNotificationsAsync(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyNotificationListNotificationsWithHttpInfoAsync(limit, cursor, seenAt, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyNotificationListNotifications200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerate notifications for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="seenAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyNotificationListNotifications200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyNotificationListNotifications200Response>> AppBskyNotificationListNotificationsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), DateTime? seenAt = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (seenAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "seenAt", seenAt));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyNotificationListNotifications200Response>("/app.bsky.notification.listNotifications", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationListNotifications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <returns></returns>
        public void AppBskyNotificationRegisterPush(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest)
        {
            AppBskyNotificationRegisterPushWithHttpInfo(appBskyNotificationRegisterPushRequest);
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> AppBskyNotificationRegisterPushWithHttpInfo(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest)
        {
            // verify the required parameter 'appBskyNotificationRegisterPushRequest' is set
            if (appBskyNotificationRegisterPushRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationRegisterPushRequest' when calling AppBskyNotificationApi->AppBskyNotificationRegisterPush");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appBskyNotificationRegisterPushRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.notification.registerPush", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationRegisterPush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyNotificationRegisterPushAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyNotificationRegisterPushWithHttpInfoAsync(appBskyNotificationRegisterPushRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Register to receive push notifications, via a specified service, for the requesting account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationRegisterPushRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> AppBskyNotificationRegisterPushWithHttpInfoAsync(AppBskyNotificationRegisterPushRequest appBskyNotificationRegisterPushRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyNotificationRegisterPushRequest' is set
            if (appBskyNotificationRegisterPushRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationRegisterPushRequest' when calling AppBskyNotificationApi->AppBskyNotificationRegisterPush");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appBskyNotificationRegisterPushRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/app.bsky.notification.registerPush", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationRegisterPush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <returns></returns>
        public void AppBskyNotificationUpdateSeen(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest)
        {
            AppBskyNotificationUpdateSeenWithHttpInfo(appBskyNotificationUpdateSeenRequest);
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> AppBskyNotificationUpdateSeenWithHttpInfo(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest)
        {
            // verify the required parameter 'appBskyNotificationUpdateSeenRequest' is set
            if (appBskyNotificationUpdateSeenRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationUpdateSeenRequest' when calling AppBskyNotificationApi->AppBskyNotificationUpdateSeen");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appBskyNotificationUpdateSeenRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/app.bsky.notification.updateSeen", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationUpdateSeen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBskyNotificationUpdateSeenAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyNotificationUpdateSeenWithHttpInfoAsync(appBskyNotificationUpdateSeenRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Notify server that the requesting account has seen notifications. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appBskyNotificationUpdateSeenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> AppBskyNotificationUpdateSeenWithHttpInfoAsync(AppBskyNotificationUpdateSeenRequest appBskyNotificationUpdateSeenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appBskyNotificationUpdateSeenRequest' is set
            if (appBskyNotificationUpdateSeenRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'appBskyNotificationUpdateSeenRequest' when calling AppBskyNotificationApi->AppBskyNotificationUpdateSeen");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appBskyNotificationUpdateSeenRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/app.bsky.notification.updateSeen", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyNotificationUpdateSeen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
