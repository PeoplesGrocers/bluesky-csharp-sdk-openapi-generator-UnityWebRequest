/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bluesky.Client;
using Bluesky.Model;

namespace Bluesky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoServerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ComAtprotoServerActivateAccount();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerActivateAccountWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerCheckAccountStatus200Response</returns>
        ComAtprotoServerCheckAccountStatus200Response ComAtprotoServerCheckAccountStatus();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerCheckAccountStatus200Response</returns>
        ApiResponse<ComAtprotoServerCheckAccountStatus200Response> ComAtprotoServerCheckAccountStatusWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerConfirmEmail(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerConfirmEmailWithHttpInfo(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an account. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <returns>ComAtprotoServerCreateAccount200Response</returns>
        ComAtprotoServerCreateAccount200Response ComAtprotoServerCreateAccount(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an account. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateAccount200Response</returns>
        ApiResponse<ComAtprotoServerCreateAccount200Response> ComAtprotoServerCreateAccountWithHttpInfo(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an App Password.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <returns>ComAtprotoServerCreateAppPasswordAppPassword</returns>
        ComAtprotoServerCreateAppPasswordAppPassword ComAtprotoServerCreateAppPassword(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an App Password.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateAppPasswordAppPassword</returns>
        ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword> ComAtprotoServerCreateAppPasswordWithHttpInfo(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an invite code.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <returns>ComAtprotoServerCreateInviteCode200Response</returns>
        ComAtprotoServerCreateInviteCode200Response ComAtprotoServerCreateInviteCode(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an invite code.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateInviteCode200Response</returns>
        ApiResponse<ComAtprotoServerCreateInviteCode200Response> ComAtprotoServerCreateInviteCodeWithHttpInfo(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <returns>ComAtprotoServerCreateInviteCodes200Response</returns>
        ComAtprotoServerCreateInviteCodes200Response ComAtprotoServerCreateInviteCodes(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateInviteCodes200Response</returns>
        ApiResponse<ComAtprotoServerCreateInviteCodes200Response> ComAtprotoServerCreateInviteCodesWithHttpInfo(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authentication session.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <returns>ComAtprotoServerCreateSession200Response</returns>
        ComAtprotoServerCreateSession200Response ComAtprotoServerCreateSession(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authentication session.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateSession200Response</returns>
        ApiResponse<ComAtprotoServerCreateSession200Response> ComAtprotoServerCreateSessionWithHttpInfo(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerDeactivateAccount(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerDeactivateAccountWithHttpInfo(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerDeleteAccount(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerDeleteAccountWithHttpInfo(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the current session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ComAtprotoServerDeleteSession();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the current session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerDeleteSessionWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerDescribeServer200Response</returns>
        ComAtprotoServerDescribeServer200Response ComAtprotoServerDescribeServer();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerDescribeServer200Response</returns>
        ApiResponse<ComAtprotoServerDescribeServer200Response> ComAtprotoServerDescribeServerWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all invite codes for the current account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <returns>ComAtprotoServerGetAccountInviteCodes200Response</returns>
        ComAtprotoServerGetAccountInviteCodes200Response ComAtprotoServerGetAccountInviteCodes(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all invite codes for the current account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <returns>ApiResponse of ComAtprotoServerGetAccountInviteCodes200Response</returns>
        ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response> ComAtprotoServerGetAccountInviteCodesWithHttpInfo(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <returns>ComAtprotoServerGetServiceAuth200Response</returns>
        ComAtprotoServerGetServiceAuth200Response ComAtprotoServerGetServiceAuth(string aud);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <returns>ApiResponse of ComAtprotoServerGetServiceAuth200Response</returns>
        ApiResponse<ComAtprotoServerGetServiceAuth200Response> ComAtprotoServerGetServiceAuthWithHttpInfo(string aud);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the current auth session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerGetSession200Response</returns>
        ComAtprotoServerGetSession200Response ComAtprotoServerGetSession();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the current auth session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerGetSession200Response</returns>
        ApiResponse<ComAtprotoServerGetSession200Response> ComAtprotoServerGetSessionWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all App Passwords.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerListAppPasswords200Response</returns>
        ComAtprotoServerListAppPasswords200Response ComAtprotoServerListAppPasswords();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all App Passwords.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerListAppPasswords200Response</returns>
        ApiResponse<ComAtprotoServerListAppPasswords200Response> ComAtprotoServerListAppPasswordsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerRefreshSession200Response</returns>
        ComAtprotoServerRefreshSession200Response ComAtprotoServerRefreshSession();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerRefreshSession200Response</returns>
        ApiResponse<ComAtprotoServerRefreshSession200Response> ComAtprotoServerRefreshSessionWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account deletion via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ComAtprotoServerRequestAccountDelete();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account deletion via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerRequestAccountDeleteWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to confirm ownership of email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ComAtprotoServerRequestEmailConfirmation();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to confirm ownership of email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerRequestEmailConfirmationWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a token in order to update email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerRequestEmailUpdate200Response</returns>
        ComAtprotoServerRequestEmailUpdate200Response ComAtprotoServerRequestEmailUpdate();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a token in order to update email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerRequestEmailUpdate200Response</returns>
        ApiResponse<ComAtprotoServerRequestEmailUpdate200Response> ComAtprotoServerRequestEmailUpdateWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account password reset via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerRequestPasswordReset(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account password reset via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerRequestPasswordResetWithHttpInfo(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <returns>ComAtprotoServerReserveSigningKey200Response</returns>
        ComAtprotoServerReserveSigningKey200Response ComAtprotoServerReserveSigningKey(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerReserveSigningKey200Response</returns>
        ApiResponse<ComAtprotoServerReserveSigningKey200Response> ComAtprotoServerReserveSigningKeyWithHttpInfo(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reset a user account password using a token.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerResetPassword(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reset a user account password using a token.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerResetPasswordWithHttpInfo(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an App Password by name.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerRevokeAppPassword(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an App Password by name.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerRevokeAppPasswordWithHttpInfo(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <returns></returns>
        void ComAtprotoServerUpdateEmail(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComAtprotoServerUpdateEmailWithHttpInfo(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoServerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerActivateAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerActivateAccountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCheckAccountStatus200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCheckAccountStatus200Response> ComAtprotoServerCheckAccountStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCheckAccountStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCheckAccountStatus200Response>> ComAtprotoServerCheckAccountStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerConfirmEmailAsync(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerConfirmEmailWithHttpInfoAsync(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an account. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateAccount200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCreateAccount200Response> ComAtprotoServerCreateAccountAsync(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an account. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateAccount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCreateAccount200Response>> ComAtprotoServerCreateAccountWithHttpInfoAsync(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an App Password.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateAppPasswordAppPassword</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCreateAppPasswordAppPassword> ComAtprotoServerCreateAppPasswordAsync(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an App Password.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateAppPasswordAppPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword>> ComAtprotoServerCreateAppPasswordWithHttpInfoAsync(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an invite code.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateInviteCode200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCreateInviteCode200Response> ComAtprotoServerCreateInviteCodeAsync(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an invite code.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateInviteCode200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCreateInviteCode200Response>> ComAtprotoServerCreateInviteCodeWithHttpInfoAsync(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateInviteCodes200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCreateInviteCodes200Response> ComAtprotoServerCreateInviteCodesAsync(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create invite codes.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateInviteCodes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCreateInviteCodes200Response>> ComAtprotoServerCreateInviteCodesWithHttpInfoAsync(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authentication session.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateSession200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerCreateSession200Response> ComAtprotoServerCreateSessionAsync(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authentication session.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateSession200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerCreateSession200Response>> ComAtprotoServerCreateSessionWithHttpInfoAsync(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerDeactivateAccountAsync(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerDeactivateAccountWithHttpInfoAsync(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerDeleteAccountAsync(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerDeleteAccountWithHttpInfoAsync(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the current session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerDeleteSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the current session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerDeleteSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerDescribeServer200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerDescribeServer200Response> ComAtprotoServerDescribeServerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerDescribeServer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerDescribeServer200Response>> ComAtprotoServerDescribeServerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all invite codes for the current account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetAccountInviteCodes200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerGetAccountInviteCodes200Response> ComAtprotoServerGetAccountInviteCodesAsync(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all invite codes for the current account. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetAccountInviteCodes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response>> ComAtprotoServerGetAccountInviteCodesWithHttpInfoAsync(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetServiceAuth200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerGetServiceAuth200Response> ComAtprotoServerGetServiceAuthAsync(string aud, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetServiceAuth200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerGetServiceAuth200Response>> ComAtprotoServerGetServiceAuthWithHttpInfoAsync(string aud, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the current auth session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetSession200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerGetSession200Response> ComAtprotoServerGetSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the current auth session. Requires auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetSession200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerGetSession200Response>> ComAtprotoServerGetSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all App Passwords.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerListAppPasswords200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerListAppPasswords200Response> ComAtprotoServerListAppPasswordsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List all App Passwords.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerListAppPasswords200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerListAppPasswords200Response>> ComAtprotoServerListAppPasswordsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerRefreshSession200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerRefreshSession200Response> ComAtprotoServerRefreshSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerRefreshSession200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerRefreshSession200Response>> ComAtprotoServerRefreshSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account deletion via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerRequestAccountDeleteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account deletion via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerRequestAccountDeleteWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to confirm ownership of email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerRequestEmailConfirmationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request an email with a code to confirm ownership of email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerRequestEmailConfirmationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a token in order to update email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerRequestEmailUpdate200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerRequestEmailUpdate200Response> ComAtprotoServerRequestEmailUpdateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request a token in order to update email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerRequestEmailUpdate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerRequestEmailUpdate200Response>> ComAtprotoServerRequestEmailUpdateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account password reset via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerRequestPasswordResetAsync(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initiate a user account password reset via email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerRequestPasswordResetWithHttpInfoAsync(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerReserveSigningKey200Response</returns>
        System.Threading.Tasks.Task<ComAtprotoServerReserveSigningKey200Response> ComAtprotoServerReserveSigningKeyAsync(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerReserveSigningKey200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComAtprotoServerReserveSigningKey200Response>> ComAtprotoServerReserveSigningKeyWithHttpInfoAsync(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reset a user account password using a token.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerResetPasswordAsync(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Reset a user account password using a token.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerResetPasswordWithHttpInfoAsync(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an App Password by name.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerRevokeAppPasswordAsync(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke an App Password by name.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerRevokeAppPasswordWithHttpInfoAsync(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComAtprotoServerUpdateEmailAsync(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an account&#39;s email.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComAtprotoServerUpdateEmailWithHttpInfoAsync(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComAtprotoServerApi : IComAtprotoServerApiSync, IComAtprotoServerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComAtprotoServerApi : IDisposable, IComAtprotoServerApi
    {
        private Bluesky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ComAtprotoServerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ComAtprotoServerApi(string basePath)
        {
            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                new Bluesky.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ComAtprotoServerApi(Bluesky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComAtprotoServerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ComAtprotoServerApi(Bluesky.Client.ISynchronousClient client, Bluesky.Client.IAsynchronousClient asyncClient, Bluesky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Bluesky.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bluesky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bluesky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bluesky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bluesky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ComAtprotoServerActivateAccount()
        {
            ComAtprotoServerActivateAccountWithHttpInfo();
        }

        /// <summary>
        ///  Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerActivateAccountWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.activateAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerActivateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerActivateAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerActivateAccountWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Activates a currently deactivated account. Used to finalize account migration after the account&#39;s repo is imported and identity is setup.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerActivateAccountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.activateAccount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerActivateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerCheckAccountStatus200Response</returns>
        public ComAtprotoServerCheckAccountStatus200Response ComAtprotoServerCheckAccountStatus()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCheckAccountStatus200Response> localVarResponse = ComAtprotoServerCheckAccountStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerCheckAccountStatus200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCheckAccountStatus200Response> ComAtprotoServerCheckAccountStatusWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerCheckAccountStatus200Response>("/com.atproto.server.checkAccountStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCheckAccountStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCheckAccountStatus200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCheckAccountStatus200Response> ComAtprotoServerCheckAccountStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCheckAccountStatusWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCheckAccountStatus200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCheckAccountStatus200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCheckAccountStatus200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCheckAccountStatus200Response>> ComAtprotoServerCheckAccountStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerCheckAccountStatus200Response>("/com.atproto.server.checkAccountStatus", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCheckAccountStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerConfirmEmail(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest)
        {
            ComAtprotoServerConfirmEmailWithHttpInfo(comAtprotoServerConfirmEmailRequest);
        }

        /// <summary>
        ///  Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerConfirmEmailWithHttpInfo(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest)
        {
            // verify the required parameter 'comAtprotoServerConfirmEmailRequest' is set
            if (comAtprotoServerConfirmEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerConfirmEmailRequest' when calling ComAtprotoServerApi->ComAtprotoServerConfirmEmail");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerConfirmEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.confirmEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerConfirmEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerConfirmEmailAsync(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerConfirmEmailWithHttpInfoAsync(comAtprotoServerConfirmEmailRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerConfirmEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerConfirmEmailWithHttpInfoAsync(ComAtprotoServerConfirmEmailRequest comAtprotoServerConfirmEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerConfirmEmailRequest' is set
            if (comAtprotoServerConfirmEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerConfirmEmailRequest' when calling ComAtprotoServerApi->ComAtprotoServerConfirmEmail");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerConfirmEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.confirmEmail", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerConfirmEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an account. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <returns>ComAtprotoServerCreateAccount200Response</returns>
        public ComAtprotoServerCreateAccount200Response ComAtprotoServerCreateAccount(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAccount200Response> localVarResponse = ComAtprotoServerCreateAccountWithHttpInfo(comAtprotoServerCreateAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an account. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateAccount200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCreateAccount200Response> ComAtprotoServerCreateAccountWithHttpInfo(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest)
        {
            // verify the required parameter 'comAtprotoServerCreateAccountRequest' is set
            if (comAtprotoServerCreateAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateAccount");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateAccountRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerCreateAccount200Response>("/com.atproto.server.createAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an account. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateAccount200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCreateAccount200Response> ComAtprotoServerCreateAccountAsync(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCreateAccountWithHttpInfoAsync(comAtprotoServerCreateAccountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAccount200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAccount200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an account. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateAccount200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCreateAccount200Response>> ComAtprotoServerCreateAccountWithHttpInfoAsync(ComAtprotoServerCreateAccountRequest comAtprotoServerCreateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerCreateAccountRequest' is set
            if (comAtprotoServerCreateAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateAccount");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateAccountRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerCreateAccount200Response>("/com.atproto.server.createAccount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an App Password.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <returns>ComAtprotoServerCreateAppPasswordAppPassword</returns>
        public ComAtprotoServerCreateAppPasswordAppPassword ComAtprotoServerCreateAppPassword(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword> localVarResponse = ComAtprotoServerCreateAppPasswordWithHttpInfo(comAtprotoServerCreateAppPasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an App Password.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateAppPasswordAppPassword</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword> ComAtprotoServerCreateAppPasswordWithHttpInfo(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest)
        {
            // verify the required parameter 'comAtprotoServerCreateAppPasswordRequest' is set
            if (comAtprotoServerCreateAppPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateAppPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateAppPassword");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateAppPasswordRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerCreateAppPasswordAppPassword>("/com.atproto.server.createAppPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateAppPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an App Password.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateAppPasswordAppPassword</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCreateAppPasswordAppPassword> ComAtprotoServerCreateAppPasswordAsync(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCreateAppPasswordWithHttpInfoAsync(comAtprotoServerCreateAppPasswordRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an App Password.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateAppPasswordAppPassword)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCreateAppPasswordAppPassword>> ComAtprotoServerCreateAppPasswordWithHttpInfoAsync(ComAtprotoServerCreateAppPasswordRequest comAtprotoServerCreateAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerCreateAppPasswordRequest' is set
            if (comAtprotoServerCreateAppPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateAppPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateAppPassword");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateAppPasswordRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerCreateAppPasswordAppPassword>("/com.atproto.server.createAppPassword", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateAppPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an invite code.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <returns>ComAtprotoServerCreateInviteCode200Response</returns>
        public ComAtprotoServerCreateInviteCode200Response ComAtprotoServerCreateInviteCode(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCode200Response> localVarResponse = ComAtprotoServerCreateInviteCodeWithHttpInfo(comAtprotoServerCreateInviteCodeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an invite code.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateInviteCode200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCode200Response> ComAtprotoServerCreateInviteCodeWithHttpInfo(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest)
        {
            // verify the required parameter 'comAtprotoServerCreateInviteCodeRequest' is set
            if (comAtprotoServerCreateInviteCodeRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateInviteCodeRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateInviteCode");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateInviteCodeRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerCreateInviteCode200Response>("/com.atproto.server.createInviteCode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateInviteCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an invite code.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateInviteCode200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCreateInviteCode200Response> ComAtprotoServerCreateInviteCodeAsync(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCreateInviteCodeWithHttpInfoAsync(comAtprotoServerCreateInviteCodeRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCode200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCode200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an invite code.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateInviteCode200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCode200Response>> ComAtprotoServerCreateInviteCodeWithHttpInfoAsync(ComAtprotoServerCreateInviteCodeRequest comAtprotoServerCreateInviteCodeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerCreateInviteCodeRequest' is set
            if (comAtprotoServerCreateInviteCodeRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateInviteCodeRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateInviteCode");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateInviteCodeRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerCreateInviteCode200Response>("/com.atproto.server.createInviteCode", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateInviteCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <returns>ComAtprotoServerCreateInviteCodes200Response</returns>
        public ComAtprotoServerCreateInviteCodes200Response ComAtprotoServerCreateInviteCodes(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCodes200Response> localVarResponse = ComAtprotoServerCreateInviteCodesWithHttpInfo(comAtprotoServerCreateInviteCodesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateInviteCodes200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCodes200Response> ComAtprotoServerCreateInviteCodesWithHttpInfo(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest)
        {
            // verify the required parameter 'comAtprotoServerCreateInviteCodesRequest' is set
            if (comAtprotoServerCreateInviteCodesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateInviteCodesRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateInviteCodes");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateInviteCodesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerCreateInviteCodes200Response>("/com.atproto.server.createInviteCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateInviteCodes200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCreateInviteCodes200Response> ComAtprotoServerCreateInviteCodesAsync(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCreateInviteCodesWithHttpInfoAsync(comAtprotoServerCreateInviteCodesRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCodes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCodes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create invite codes.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateInviteCodesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateInviteCodes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCreateInviteCodes200Response>> ComAtprotoServerCreateInviteCodesWithHttpInfoAsync(ComAtprotoServerCreateInviteCodesRequest comAtprotoServerCreateInviteCodesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerCreateInviteCodesRequest' is set
            if (comAtprotoServerCreateInviteCodesRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateInviteCodesRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateInviteCodes");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateInviteCodesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerCreateInviteCodes200Response>("/com.atproto.server.createInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an authentication session.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <returns>ComAtprotoServerCreateSession200Response</returns>
        public ComAtprotoServerCreateSession200Response ComAtprotoServerCreateSession(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateSession200Response> localVarResponse = ComAtprotoServerCreateSessionWithHttpInfo(comAtprotoServerCreateSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an authentication session.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerCreateSession200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerCreateSession200Response> ComAtprotoServerCreateSessionWithHttpInfo(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest)
        {
            // verify the required parameter 'comAtprotoServerCreateSessionRequest' is set
            if (comAtprotoServerCreateSessionRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateSessionRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateSession");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateSessionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerCreateSession200Response>("/com.atproto.server.createSession", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an authentication session.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerCreateSession200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerCreateSession200Response> ComAtprotoServerCreateSessionAsync(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerCreateSessionWithHttpInfoAsync(comAtprotoServerCreateSessionRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateSession200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerCreateSession200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an authentication session.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerCreateSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerCreateSession200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerCreateSession200Response>> ComAtprotoServerCreateSessionWithHttpInfoAsync(ComAtprotoServerCreateSessionRequest comAtprotoServerCreateSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerCreateSessionRequest' is set
            if (comAtprotoServerCreateSessionRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerCreateSessionRequest' when calling ComAtprotoServerApi->ComAtprotoServerCreateSession");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerCreateSessionRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerCreateSession200Response>("/com.atproto.server.createSession", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerCreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerDeactivateAccount(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest)
        {
            ComAtprotoServerDeactivateAccountWithHttpInfo(comAtprotoServerDeactivateAccountRequest);
        }

        /// <summary>
        ///  Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerDeactivateAccountWithHttpInfo(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest)
        {
            // verify the required parameter 'comAtprotoServerDeactivateAccountRequest' is set
            if (comAtprotoServerDeactivateAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerDeactivateAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerDeactivateAccount");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerDeactivateAccountRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.deactivateAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeactivateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerDeactivateAccountAsync(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerDeactivateAccountWithHttpInfoAsync(comAtprotoServerDeactivateAccountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeactivateAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerDeactivateAccountWithHttpInfoAsync(ComAtprotoServerDeactivateAccountRequest comAtprotoServerDeactivateAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerDeactivateAccountRequest' is set
            if (comAtprotoServerDeactivateAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerDeactivateAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerDeactivateAccount");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerDeactivateAccountRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.deactivateAccount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeactivateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerDeleteAccount(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest)
        {
            ComAtprotoServerDeleteAccountWithHttpInfo(comAtprotoServerDeleteAccountRequest);
        }

        /// <summary>
        ///  Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerDeleteAccountWithHttpInfo(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest)
        {
            // verify the required parameter 'comAtprotoServerDeleteAccountRequest' is set
            if (comAtprotoServerDeleteAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerDeleteAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerDeleteAccount");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerDeleteAccountRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.deleteAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerDeleteAccountAsync(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerDeleteAccountWithHttpInfoAsync(comAtprotoServerDeleteAccountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Delete an actor&#39;s account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerDeleteAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerDeleteAccountWithHttpInfoAsync(ComAtprotoServerDeleteAccountRequest comAtprotoServerDeleteAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerDeleteAccountRequest' is set
            if (comAtprotoServerDeleteAccountRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerDeleteAccountRequest' when calling ComAtprotoServerApi->ComAtprotoServerDeleteAccount");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerDeleteAccountRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.deleteAccount", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeleteAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete the current session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ComAtprotoServerDeleteSession()
        {
            ComAtprotoServerDeleteSessionWithHttpInfo();
        }

        /// <summary>
        ///  Delete the current session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerDeleteSessionWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.deleteSession", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeleteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete the current session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerDeleteSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerDeleteSessionWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Delete the current session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerDeleteSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.deleteSession", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDeleteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerDescribeServer200Response</returns>
        public ComAtprotoServerDescribeServer200Response ComAtprotoServerDescribeServer()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerDescribeServer200Response> localVarResponse = ComAtprotoServerDescribeServerWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerDescribeServer200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerDescribeServer200Response> ComAtprotoServerDescribeServerWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerDescribeServer200Response>("/com.atproto.server.describeServer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDescribeServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerDescribeServer200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerDescribeServer200Response> ComAtprotoServerDescribeServerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerDescribeServerWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerDescribeServer200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerDescribeServer200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Describes the server&#39;s account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerDescribeServer200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerDescribeServer200Response>> ComAtprotoServerDescribeServerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerDescribeServer200Response>("/com.atproto.server.describeServer", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerDescribeServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all invite codes for the current account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <returns>ComAtprotoServerGetAccountInviteCodes200Response</returns>
        public ComAtprotoServerGetAccountInviteCodes200Response ComAtprotoServerGetAccountInviteCodes(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?))
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response> localVarResponse = ComAtprotoServerGetAccountInviteCodesWithHttpInfo(includeUsed, createAvailable);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all invite codes for the current account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <returns>ApiResponse of ComAtprotoServerGetAccountInviteCodes200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response> ComAtprotoServerGetAccountInviteCodesWithHttpInfo(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeUsed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeUsed", includeUsed));
            }
            if (createAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createAvailable", createAvailable));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerGetAccountInviteCodes200Response>("/com.atproto.server.getAccountInviteCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetAccountInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all invite codes for the current account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetAccountInviteCodes200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerGetAccountInviteCodes200Response> ComAtprotoServerGetAccountInviteCodesAsync(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerGetAccountInviteCodesWithHttpInfoAsync(includeUsed, createAvailable, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all invite codes for the current account. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUsed"> (optional, default to true)</param>
        /// <param name="createAvailable">Controls whether any new &#39;earned&#39; but not &#39;created&#39; invites should be created. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetAccountInviteCodes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerGetAccountInviteCodes200Response>> ComAtprotoServerGetAccountInviteCodesWithHttpInfoAsync(bool? includeUsed = default(bool?), bool? createAvailable = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeUsed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "includeUsed", includeUsed));
            }
            if (createAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "createAvailable", createAvailable));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerGetAccountInviteCodes200Response>("/com.atproto.server.getAccountInviteCodes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetAccountInviteCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a signed token on behalf of the requesting DID for the requested service.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <returns>ComAtprotoServerGetServiceAuth200Response</returns>
        public ComAtprotoServerGetServiceAuth200Response ComAtprotoServerGetServiceAuth(string aud)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerGetServiceAuth200Response> localVarResponse = ComAtprotoServerGetServiceAuthWithHttpInfo(aud);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a signed token on behalf of the requesting DID for the requested service.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <returns>ApiResponse of ComAtprotoServerGetServiceAuth200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerGetServiceAuth200Response> ComAtprotoServerGetServiceAuthWithHttpInfo(string aud)
        {
            // verify the required parameter 'aud' is set
            if (aud == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'aud' when calling ComAtprotoServerApi->ComAtprotoServerGetServiceAuth");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "aud", aud));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerGetServiceAuth200Response>("/com.atproto.server.getServiceAuth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetServiceAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a signed token on behalf of the requesting DID for the requested service.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetServiceAuth200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerGetServiceAuth200Response> ComAtprotoServerGetServiceAuthAsync(string aud, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerGetServiceAuthWithHttpInfoAsync(aud, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerGetServiceAuth200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerGetServiceAuth200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a signed token on behalf of the requesting DID for the requested service.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetServiceAuth200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerGetServiceAuth200Response>> ComAtprotoServerGetServiceAuthWithHttpInfoAsync(string aud, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aud' is set
            if (aud == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'aud' when calling ComAtprotoServerApi->ComAtprotoServerGetServiceAuth");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "aud", aud));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerGetServiceAuth200Response>("/com.atproto.server.getServiceAuth", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetServiceAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the current auth session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerGetSession200Response</returns>
        public ComAtprotoServerGetSession200Response ComAtprotoServerGetSession()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerGetSession200Response> localVarResponse = ComAtprotoServerGetSessionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the current auth session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerGetSession200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerGetSession200Response> ComAtprotoServerGetSessionWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerGetSession200Response>("/com.atproto.server.getSession", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the current auth session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerGetSession200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerGetSession200Response> ComAtprotoServerGetSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerGetSessionWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerGetSession200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerGetSession200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the current auth session. Requires auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerGetSession200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerGetSession200Response>> ComAtprotoServerGetSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerGetSession200Response>("/com.atproto.server.getSession", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerGetSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all App Passwords.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerListAppPasswords200Response</returns>
        public ComAtprotoServerListAppPasswords200Response ComAtprotoServerListAppPasswords()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerListAppPasswords200Response> localVarResponse = ComAtprotoServerListAppPasswordsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all App Passwords.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerListAppPasswords200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerListAppPasswords200Response> ComAtprotoServerListAppPasswordsWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComAtprotoServerListAppPasswords200Response>("/com.atproto.server.listAppPasswords", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerListAppPasswords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List all App Passwords.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerListAppPasswords200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerListAppPasswords200Response> ComAtprotoServerListAppPasswordsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerListAppPasswordsWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerListAppPasswords200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerListAppPasswords200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List all App Passwords.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerListAppPasswords200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerListAppPasswords200Response>> ComAtprotoServerListAppPasswordsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ComAtprotoServerListAppPasswords200Response>("/com.atproto.server.listAppPasswords", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerListAppPasswords", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerRefreshSession200Response</returns>
        public ComAtprotoServerRefreshSession200Response ComAtprotoServerRefreshSession()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerRefreshSession200Response> localVarResponse = ComAtprotoServerRefreshSessionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerRefreshSession200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerRefreshSession200Response> ComAtprotoServerRefreshSessionWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerRefreshSession200Response>("/com.atproto.server.refreshSession", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRefreshSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerRefreshSession200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerRefreshSession200Response> ComAtprotoServerRefreshSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRefreshSessionWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerRefreshSession200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerRefreshSession200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Refresh an authentication session. Requires auth using the &#39;refreshJwt&#39; (not the &#39;accessJwt&#39;).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerRefreshSession200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerRefreshSession200Response>> ComAtprotoServerRefreshSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerRefreshSession200Response>("/com.atproto.server.refreshSession", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRefreshSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiate a user account deletion via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ComAtprotoServerRequestAccountDelete()
        {
            ComAtprotoServerRequestAccountDeleteWithHttpInfo();
        }

        /// <summary>
        ///  Initiate a user account deletion via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerRequestAccountDeleteWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.requestAccountDelete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestAccountDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiate a user account deletion via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerRequestAccountDeleteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRequestAccountDeleteWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Initiate a user account deletion via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerRequestAccountDeleteWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.requestAccountDelete", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestAccountDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ComAtprotoServerRequestEmailConfirmation()
        {
            ComAtprotoServerRequestEmailConfirmationWithHttpInfo();
        }

        /// <summary>
        ///  Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerRequestEmailConfirmationWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.requestEmailConfirmation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestEmailConfirmation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerRequestEmailConfirmationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRequestEmailConfirmationWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerRequestEmailConfirmationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.requestEmailConfirmation", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestEmailConfirmation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request a token in order to update email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ComAtprotoServerRequestEmailUpdate200Response</returns>
        public ComAtprotoServerRequestEmailUpdate200Response ComAtprotoServerRequestEmailUpdate()
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerRequestEmailUpdate200Response> localVarResponse = ComAtprotoServerRequestEmailUpdateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request a token in order to update email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ComAtprotoServerRequestEmailUpdate200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerRequestEmailUpdate200Response> ComAtprotoServerRequestEmailUpdateWithHttpInfo()
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerRequestEmailUpdate200Response>("/com.atproto.server.requestEmailUpdate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestEmailUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request a token in order to update email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerRequestEmailUpdate200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerRequestEmailUpdate200Response> ComAtprotoServerRequestEmailUpdateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRequestEmailUpdateWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerRequestEmailUpdate200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerRequestEmailUpdate200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request a token in order to update email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerRequestEmailUpdate200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerRequestEmailUpdate200Response>> ComAtprotoServerRequestEmailUpdateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerRequestEmailUpdate200Response>("/com.atproto.server.requestEmailUpdate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestEmailUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiate a user account password reset via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerRequestPasswordReset(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest)
        {
            ComAtprotoServerRequestPasswordResetWithHttpInfo(comAtprotoServerRequestPasswordResetRequest);
        }

        /// <summary>
        ///  Initiate a user account password reset via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerRequestPasswordResetWithHttpInfo(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest)
        {
            // verify the required parameter 'comAtprotoServerRequestPasswordResetRequest' is set
            if (comAtprotoServerRequestPasswordResetRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerRequestPasswordResetRequest' when calling ComAtprotoServerApi->ComAtprotoServerRequestPasswordReset");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerRequestPasswordResetRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.requestPasswordReset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestPasswordReset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initiate a user account password reset via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerRequestPasswordResetAsync(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRequestPasswordResetWithHttpInfoAsync(comAtprotoServerRequestPasswordResetRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Initiate a user account password reset via email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRequestPasswordResetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerRequestPasswordResetWithHttpInfoAsync(ComAtprotoServerRequestPasswordResetRequest comAtprotoServerRequestPasswordResetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerRequestPasswordResetRequest' is set
            if (comAtprotoServerRequestPasswordResetRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerRequestPasswordResetRequest' when calling ComAtprotoServerApi->ComAtprotoServerRequestPasswordReset");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerRequestPasswordResetRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.requestPasswordReset", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRequestPasswordReset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <returns>ComAtprotoServerReserveSigningKey200Response</returns>
        public ComAtprotoServerReserveSigningKey200Response ComAtprotoServerReserveSigningKey(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest)
        {
            Bluesky.Client.ApiResponse<ComAtprotoServerReserveSigningKey200Response> localVarResponse = ComAtprotoServerReserveSigningKeyWithHttpInfo(comAtprotoServerReserveSigningKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <returns>ApiResponse of ComAtprotoServerReserveSigningKey200Response</returns>
        public Bluesky.Client.ApiResponse<ComAtprotoServerReserveSigningKey200Response> ComAtprotoServerReserveSigningKeyWithHttpInfo(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest)
        {
            // verify the required parameter 'comAtprotoServerReserveSigningKeyRequest' is set
            if (comAtprotoServerReserveSigningKeyRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerReserveSigningKeyRequest' when calling ComAtprotoServerApi->ComAtprotoServerReserveSigningKey");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerReserveSigningKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ComAtprotoServerReserveSigningKey200Response>("/com.atproto.server.reserveSigningKey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerReserveSigningKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComAtprotoServerReserveSigningKey200Response</returns>
        public async System.Threading.Tasks.Task<ComAtprotoServerReserveSigningKey200Response> ComAtprotoServerReserveSigningKeyAsync(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerReserveSigningKeyWithHttpInfoAsync(comAtprotoServerReserveSigningKeyRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<ComAtprotoServerReserveSigningKey200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<ComAtprotoServerReserveSigningKey200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerReserveSigningKeyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComAtprotoServerReserveSigningKey200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<ComAtprotoServerReserveSigningKey200Response>> ComAtprotoServerReserveSigningKeyWithHttpInfoAsync(ComAtprotoServerReserveSigningKeyRequest comAtprotoServerReserveSigningKeyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerReserveSigningKeyRequest' is set
            if (comAtprotoServerReserveSigningKeyRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerReserveSigningKeyRequest' when calling ComAtprotoServerApi->ComAtprotoServerReserveSigningKey");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerReserveSigningKeyRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ComAtprotoServerReserveSigningKey200Response>("/com.atproto.server.reserveSigningKey", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerReserveSigningKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Reset a user account password using a token.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerResetPassword(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest)
        {
            ComAtprotoServerResetPasswordWithHttpInfo(comAtprotoServerResetPasswordRequest);
        }

        /// <summary>
        ///  Reset a user account password using a token.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerResetPasswordWithHttpInfo(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest)
        {
            // verify the required parameter 'comAtprotoServerResetPasswordRequest' is set
            if (comAtprotoServerResetPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerResetPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerResetPassword");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerResetPasswordRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.resetPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Reset a user account password using a token.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerResetPasswordAsync(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerResetPasswordWithHttpInfoAsync(comAtprotoServerResetPasswordRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Reset a user account password using a token.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerResetPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerResetPasswordWithHttpInfoAsync(ComAtprotoServerResetPasswordRequest comAtprotoServerResetPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerResetPasswordRequest' is set
            if (comAtprotoServerResetPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerResetPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerResetPassword");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerResetPasswordRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.resetPassword", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerResetPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revoke an App Password by name.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerRevokeAppPassword(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest)
        {
            ComAtprotoServerRevokeAppPasswordWithHttpInfo(comAtprotoServerRevokeAppPasswordRequest);
        }

        /// <summary>
        ///  Revoke an App Password by name.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerRevokeAppPasswordWithHttpInfo(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest)
        {
            // verify the required parameter 'comAtprotoServerRevokeAppPasswordRequest' is set
            if (comAtprotoServerRevokeAppPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerRevokeAppPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerRevokeAppPassword");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerRevokeAppPasswordRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.revokeAppPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRevokeAppPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revoke an App Password by name.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerRevokeAppPasswordAsync(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerRevokeAppPasswordWithHttpInfoAsync(comAtprotoServerRevokeAppPasswordRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Revoke an App Password by name.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerRevokeAppPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerRevokeAppPasswordWithHttpInfoAsync(ComAtprotoServerRevokeAppPasswordRequest comAtprotoServerRevokeAppPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerRevokeAppPasswordRequest' is set
            if (comAtprotoServerRevokeAppPasswordRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerRevokeAppPasswordRequest' when calling ComAtprotoServerApi->ComAtprotoServerRevokeAppPassword");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerRevokeAppPasswordRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.revokeAppPassword", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerRevokeAppPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <returns></returns>
        public void ComAtprotoServerUpdateEmail(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest)
        {
            ComAtprotoServerUpdateEmailWithHttpInfo(comAtprotoServerUpdateEmailRequest);
        }

        /// <summary>
        ///  Update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bluesky.Client.ApiResponse<Object> ComAtprotoServerUpdateEmailWithHttpInfo(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest)
        {
            // verify the required parameter 'comAtprotoServerUpdateEmailRequest' is set
            if (comAtprotoServerUpdateEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerUpdateEmailRequest' when calling ComAtprotoServerApi->ComAtprotoServerUpdateEmail");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerUpdateEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/com.atproto.server.updateEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerUpdateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComAtprotoServerUpdateEmailAsync(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ComAtprotoServerUpdateEmailWithHttpInfoAsync(comAtprotoServerUpdateEmailRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  Update an account&#39;s email.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="comAtprotoServerUpdateEmailRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<Object>> ComAtprotoServerUpdateEmailWithHttpInfoAsync(ComAtprotoServerUpdateEmailRequest comAtprotoServerUpdateEmailRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'comAtprotoServerUpdateEmailRequest' is set
            if (comAtprotoServerUpdateEmailRequest == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'comAtprotoServerUpdateEmailRequest' when calling ComAtprotoServerApi->ComAtprotoServerUpdateEmail");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = comAtprotoServerUpdateEmailRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/com.atproto.server.updateEmail", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComAtprotoServerUpdateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
