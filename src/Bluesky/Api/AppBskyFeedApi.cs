/*
 * AT Protocol XRPC API
 *
 * This section contains HTTP API reference docs for Bluesky and AT Protocol lexicons. Generate a bearer token to test API calls directly from the docs.
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bluesky.Client;
using Bluesky.Model;

namespace Bluesky.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        AppBskyFeedGetActorFeeds200Response AppBskyFeedGetActorFeeds(string actor, int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetActorLikes(string actor, int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetAuthorFeed(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetFeed(string feed, int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <returns>AppBskyFeedGetFeedGenerator200Response</returns>
        AppBskyFeedGetFeedGenerator200Response AppBskyFeedGetFeedGenerator(string feed);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerator200Response</returns>
        ApiResponse<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorWithHttpInfo(string feed);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <returns>AppBskyFeedGetFeedGenerators200Response</returns>
        AppBskyFeedGetFeedGenerators200Response AppBskyFeedGetFeedGenerators(List<string> feeds);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerators200Response</returns>
        ApiResponse<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsWithHttpInfo(List<string> feeds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetLikes200Response</returns>
        AppBskyFeedGetLikes200Response AppBskyFeedGetLikes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetLikes200Response</returns>
        ApiResponse<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetListFeed(string list, int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedWithHttpInfo(string list, int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <returns>AppBskyFeedGetPostThread200Response</returns>
        AppBskyFeedGetPostThread200Response AppBskyFeedGetPostThread(string uri, int? depth = default(int?), int? parentHeight = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <returns>ApiResponse of AppBskyFeedGetPostThread200Response</returns>
        ApiResponse<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadWithHttpInfo(string uri, int? depth = default(int?), int? parentHeight = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <returns>AppBskyFeedGetPosts200Response</returns>
        AppBskyFeedGetPosts200Response AppBskyFeedGetPosts(List<string> uris);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPosts200Response</returns>
        ApiResponse<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsWithHttpInfo(List<string> uris);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetRepostedBy200Response</returns>
        AppBskyFeedGetRepostedBy200Response AppBskyFeedGetRepostedBy(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetRepostedBy200Response</returns>
        ApiResponse<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        AppBskyFeedGetActorFeeds200Response AppBskyFeedGetSuggestedFeeds(int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        AppBskyFeedGetActorLikes200Response AppBskyFeedGetTimeline(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineWithHttpInfo(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <returns>AppBskyFeedSearchPosts200Response</returns>
        AppBskyFeedSearchPosts200Response AppBskyFeedSearchPosts(string q, int? limit = default(int?), string? cursor = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedSearchPosts200Response</returns>
        ApiResponse<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsWithHttpInfo(string q, int? limit = default(int?), string? cursor = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetActorFeedsWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of posts liked by an actor. Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetActorLikesWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetAuthorFeedWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedAsync(string feed, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetFeedWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerator200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorAsync(string feed, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a feed generator. Implemented by AppView.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerator200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetFeedGenerator200Response>> AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(string feed, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerators200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsAsync(List<string> feeds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a list of feed generators.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerators200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetFeedGenerators200Response>> AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(List<string> feeds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get like records which reference a subject (by AT-URI and CID).
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetLikes200Response>> AppBskyFeedGetLikesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedAsync(string list, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetListFeedWithHttpInfoAsync(string list, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPostThread200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPostThread200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetPostThread200Response>> AppBskyFeedGetPostThreadWithHttpInfoAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPosts200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsAsync(List<string> uris, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetPosts200Response>> AppBskyFeedGetPostsWithHttpInfoAsync(List<string> uris, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetRepostedBy200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of reposts for a given post.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetRepostedBy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetRepostedBy200Response>> AppBskyFeedGetRepostedByWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsAsync(int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of suggested feeds (feed generators) for the requesting account.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetTimelineWithHttpInfoAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSearchPosts200Response</returns>
        System.Threading.Tasks.Task<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsAsync(string q, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Find posts matching search criteria, returning views of those posts.
        /// </remarks>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSearchPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppBskyFeedSearchPosts200Response>> AppBskyFeedSearchPostsWithHttpInfoAsync(string q, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBskyFeedApi : IAppBskyFeedApiSync, IAppBskyFeedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBskyFeedApi : IDisposable, IAppBskyFeedApi
    {
        private Bluesky.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppBskyFeedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppBskyFeedApi(string basePath)
        {
            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                new Bluesky.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppBskyFeedApi(Bluesky.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bluesky.Client.Configuration.MergeConfigurations(
                Bluesky.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Bluesky.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBskyFeedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppBskyFeedApi(Bluesky.Client.ISynchronousClient client, Bluesky.Client.IAsynchronousClient asyncClient, Bluesky.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bluesky.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Bluesky.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bluesky.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bluesky.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bluesky.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bluesky.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        public AppBskyFeedGetActorFeeds200Response AppBskyFeedGetActorFeeds(string actor, int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = AppBskyFeedGetActorFeedsWithHttpInfo(actor, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorFeeds");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getActorFeeds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorFeeds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetActorFeedsAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetActorFeedsWithHttpInfoAsync(actor, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of feeds (feed generator records) created by the actor (in the actor&#39;s repo).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetActorFeedsWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorFeeds");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getActorFeeds", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorFeeds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetActorLikes(string actor, int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetActorLikesWithHttpInfo(actor, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorLikes");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getActorLikes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetActorLikesAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetActorLikesWithHttpInfoAsync(actor, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of posts liked by an actor. Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetActorLikesWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetActorLikes");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getActorLikes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetActorLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetAuthorFeed(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetAuthorFeedWithHttpInfo(actor, limit, cursor, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedWithHttpInfo(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetAuthorFeed");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getAuthorFeed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetAuthorFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetAuthorFeedAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetAuthorFeedWithHttpInfoAsync(actor, limit, cursor, filter, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of an actor&#39;s &#39;author feed&#39; (post and reposts by the author). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actor"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="filter">Combinations of post/repost types to include in response. (optional, default to posts_with_replies)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetAuthorFeedWithHttpInfoAsync(string actor, int? limit = default(int?), string? cursor = default(string?), string? filter = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'actor' is set
            if (actor == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'actor' when calling AppBskyFeedApi->AppBskyFeedGetAuthorFeed");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "actor", actor));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getAuthorFeed", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetAuthorFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetFeed(string feed, int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetFeedWithHttpInfo(feed, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedWithHttpInfo(string feed, int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeed");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getFeed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetFeedAsync(string feed, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetFeedWithHttpInfoAsync(feed, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a hydrated feed from an actor&#39;s selected feed generator. Implemented by App View.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed"></param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetFeedWithHttpInfoAsync(string feed, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeed");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getFeed", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <returns>AppBskyFeedGetFeedGenerator200Response</returns>
        public AppBskyFeedGetFeedGenerator200Response AppBskyFeedGetFeedGenerator(string feed)
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> localVarResponse = AppBskyFeedGetFeedGeneratorWithHttpInfo(feed);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerator200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorWithHttpInfo(string feed)
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerator");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetFeedGenerator200Response>("/app.bsky.feed.getFeedGenerator", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerator200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerator200Response> AppBskyFeedGetFeedGeneratorAsync(string feed, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(feed, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a feed generator. Implemented by AppView.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feed">AT-URI of the feed generator record.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerator200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerator200Response>> AppBskyFeedGetFeedGeneratorWithHttpInfoAsync(string feed, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feed' is set
            if (feed == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feed' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerator");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "feed", feed));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetFeedGenerator200Response>("/app.bsky.feed.getFeedGenerator", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <returns>AppBskyFeedGetFeedGenerators200Response</returns>
        public AppBskyFeedGetFeedGenerators200Response AppBskyFeedGetFeedGenerators(List<string> feeds)
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> localVarResponse = AppBskyFeedGetFeedGeneratorsWithHttpInfo(feeds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <returns>ApiResponse of AppBskyFeedGetFeedGenerators200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsWithHttpInfo(List<string> feeds)
        {
            // verify the required parameter 'feeds' is set
            if (feeds == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feeds' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerators");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "feeds", feeds));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetFeedGenerators200Response>("/app.bsky.feed.getFeedGenerators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetFeedGenerators200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetFeedGenerators200Response> AppBskyFeedGetFeedGeneratorsAsync(List<string> feeds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(feeds, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a list of feed generators.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetFeedGenerators200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetFeedGenerators200Response>> AppBskyFeedGetFeedGeneratorsWithHttpInfoAsync(List<string> feeds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feeds' is set
            if (feeds == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'feeds' when calling AppBskyFeedApi->AppBskyFeedGetFeedGenerators");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "feeds", feeds));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetFeedGenerators200Response>("/app.bsky.feed.getFeedGenerators", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetFeedGenerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetLikes200Response</returns>
        public AppBskyFeedGetLikes200Response AppBskyFeedGetLikes(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetLikes200Response> localVarResponse = AppBskyFeedGetLikesWithHttpInfo(uri, cid, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetLikes");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetLikes200Response>("/app.bsky.feed.getLikes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetLikes200Response> AppBskyFeedGetLikesAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetLikesWithHttpInfoAsync(uri, cid, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get like records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter likes. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetLikes200Response>> AppBskyFeedGetLikesWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetLikes");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetLikes200Response>("/app.bsky.feed.getLikes", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetListFeed(string list, int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetListFeedWithHttpInfo(list, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedWithHttpInfo(string list, int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'list' when calling AppBskyFeedApi->AppBskyFeedGetListFeed");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getListFeed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetListFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetListFeedAsync(string list, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetListFeedWithHttpInfoAsync(list, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Reference (AT-URI) to the list record.</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetListFeedWithHttpInfoAsync(string list, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'list' when calling AppBskyFeedApi->AppBskyFeedGetListFeed");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getListFeed", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetListFeed", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <returns>AppBskyFeedGetPostThread200Response</returns>
        public AppBskyFeedGetPostThread200Response AppBskyFeedGetPostThread(string uri, int? depth = default(int?), int? parentHeight = default(int?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> localVarResponse = AppBskyFeedGetPostThreadWithHttpInfo(uri, depth, parentHeight);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <returns>ApiResponse of AppBskyFeedGetPostThread200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadWithHttpInfo(string uri, int? depth = default(int?), int? parentHeight = default(int?))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetPostThread");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (parentHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "parentHeight", parentHeight));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetPostThread200Response>("/app.bsky.feed.getPostThread", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPostThread", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPostThread200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetPostThread200Response> AppBskyFeedGetPostThreadAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetPostThreadWithHttpInfoAsync(uri, depth, parentHeight, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetPostThread200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) to post record.</param>
        /// <param name="depth">How many levels of reply depth should be included in response. (optional, default to 6)</param>
        /// <param name="parentHeight">How many levels of parent (and grandparent, etc) post to include. (optional, default to 80)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPostThread200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetPostThread200Response>> AppBskyFeedGetPostThreadWithHttpInfoAsync(string uri, int? depth = default(int?), int? parentHeight = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetPostThread");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }
            if (parentHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "parentHeight", parentHeight));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetPostThread200Response>("/app.bsky.feed.getPostThread", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPostThread", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <returns>AppBskyFeedGetPosts200Response</returns>
        public AppBskyFeedGetPosts200Response AppBskyFeedGetPosts(List<string> uris)
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetPosts200Response> localVarResponse = AppBskyFeedGetPostsWithHttpInfo(uris);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <returns>ApiResponse of AppBskyFeedGetPosts200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsWithHttpInfo(List<string> uris)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uris' when calling AppBskyFeedApi->AppBskyFeedGetPosts");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "uris", uris));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetPosts200Response>("/app.bsky.feed.getPosts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetPosts200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetPosts200Response> AppBskyFeedGetPostsAsync(List<string> uris, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetPostsWithHttpInfoAsync(uris, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetPosts200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetPosts200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as &#39;hydrating&#39; a &#39;feed skeleton&#39;.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uris">List of post AT-URIs to return hydrated views for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetPosts200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetPosts200Response>> AppBskyFeedGetPostsWithHttpInfoAsync(List<string> uris, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uris' when calling AppBskyFeedApi->AppBskyFeedGetPosts");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("multi", "uris", uris));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetPosts200Response>("/app.bsky.feed.getPosts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetPosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetRepostedBy200Response</returns>
        public AppBskyFeedGetRepostedBy200Response AppBskyFeedGetRepostedBy(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> localVarResponse = AppBskyFeedGetRepostedByWithHttpInfo(uri, cid, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetRepostedBy200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByWithHttpInfo(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetRepostedBy");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetRepostedBy200Response>("/app.bsky.feed.getRepostedBy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetRepostedBy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetRepostedBy200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetRepostedBy200Response> AppBskyFeedGetRepostedByAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetRepostedByWithHttpInfoAsync(uri, cid, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of reposts for a given post.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uri">Reference (AT-URI) of post record</param>
        /// <param name="cid">If supplied, filters to reposts of specific version (by CID) of the post record. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetRepostedBy200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetRepostedBy200Response>> AppBskyFeedGetRepostedByWithHttpInfoAsync(string uri, string? cid = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uri' is set
            if (uri == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'uri' when calling AppBskyFeedApi->AppBskyFeedGetRepostedBy");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "uri", uri));
            if (cid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cid", cid));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetRepostedBy200Response>("/app.bsky.feed.getRepostedBy", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetRepostedBy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorFeeds200Response</returns>
        public AppBskyFeedGetActorFeeds200Response AppBskyFeedGetSuggestedFeeds(int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = AppBskyFeedGetSuggestedFeedsWithHttpInfo(limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorFeeds200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsWithHttpInfo(int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getSuggestedFeeds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetSuggestedFeeds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorFeeds200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorFeeds200Response> AppBskyFeedGetSuggestedFeedsAsync(int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of suggested feeds (feed generators) for the requesting account.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorFeeds200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorFeeds200Response>> AppBskyFeedGetSuggestedFeedsWithHttpInfoAsync(int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorFeeds200Response>("/app.bsky.feed.getSuggestedFeeds", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetSuggestedFeeds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>AppBskyFeedGetActorLikes200Response</returns>
        public AppBskyFeedGetActorLikes200Response AppBskyFeedGetTimeline(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = AppBskyFeedGetTimelineWithHttpInfo(algorithm, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedGetActorLikes200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineWithHttpInfo(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (algorithm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "algorithm", algorithm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getTimeline", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetTimeline", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedGetActorLikes200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedGetActorLikes200Response> AppBskyFeedGetTimelineAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedGetTimelineWithHttpInfoAsync(algorithm, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a view of the requesting account&#39;s home timeline. This is expected to be some form of reverse-chronological feed.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Variant &#39;algorithm&#39; for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism. (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedGetActorLikes200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedGetActorLikes200Response>> AppBskyFeedGetTimelineWithHttpInfoAsync(string? algorithm = default(string?), int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (algorithm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "algorithm", algorithm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedGetActorLikes200Response>("/app.bsky.feed.getTimeline", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedGetTimeline", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <returns>AppBskyFeedSearchPosts200Response</returns>
        public AppBskyFeedSearchPosts200Response AppBskyFeedSearchPosts(string q, int? limit = default(int?), string? cursor = default(string?))
        {
            Bluesky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> localVarResponse = AppBskyFeedSearchPostsWithHttpInfo(q, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <returns>ApiResponse of AppBskyFeedSearchPosts200Response</returns>
        public Bluesky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsWithHttpInfo(string q, int? limit = default(int?), string? cursor = default(string?))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'q' when calling AppBskyFeedApi->AppBskyFeedSearchPosts");

            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppBskyFeedSearchPosts200Response>("/app.bsky.feed.searchPosts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSearchPosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppBskyFeedSearchPosts200Response</returns>
        public async System.Threading.Tasks.Task<AppBskyFeedSearchPosts200Response> AppBskyFeedSearchPostsAsync(string q, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppBskyFeedSearchPostsWithHttpInfoAsync(q, limit, cursor, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Bluesky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Bluesky.Client.ApiResponse<AppBskyFeedSearchPosts200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Find posts matching search criteria, returning views of those posts.
        /// </summary>
        /// <exception cref="Bluesky.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="limit"> (optional, default to 25)</param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppBskyFeedSearchPosts200Response)</returns>
        public async System.Threading.Tasks.Task<Bluesky.Client.ApiResponse<AppBskyFeedSearchPosts200Response>> AppBskyFeedSearchPostsWithHttpInfoAsync(string q, int? limit = default(int?), string? cursor = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Bluesky.Client.ApiException(400, "Missing required parameter 'q' when calling AppBskyFeedApi->AppBskyFeedSearchPosts");


            Bluesky.Client.RequestOptions localVarRequestOptions = new Bluesky.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Bluesky.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Bluesky.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bluesky.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AppBskyFeedSearchPosts200Response>("/app.bsky.feed.searchPosts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppBskyFeedSearchPosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
